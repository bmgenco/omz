#
### function to spatial select odz interpolated products ####
# f.odz_interpolated_spatial<-function(odz_i, lat_max, lat_min, lon_min, lon_max){}
#
### function to spatial select woa interpolated  products ####
# f.woa_interpolated_spatial<-function(woa_i, lat_max, lat_min, lon_min, lon_max){}
### function to convert depth when reading in nc files
#### function to create buffer around hurricane points ####
f.buffer_select<-function(h.pts, function_variables){
# x<-h.pts
x<-h.pts
radi.m<-function_variables$h.radi
y<-st_geometry(x)
f.circle<-function(y, radi.m){
lat0<-y[[1]][2]
lon0<-y[[1]][1]
center.reproj<-paste0("+proj=aeqd +lat_0=", lat0, " ", "+lon_0=", lon0)
flat<-sf::st_transform(y, center.reproj )
circle<-sf::st_buffer(flat, dist=radi.m)%>%sf::st_transform(., "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
return(circle)
}
circle<-sf::st_as_sf(f.circle(y, radi.m))
names(circle)<-"buffer"
st_geometry(circle)<-"buffer"
z<-cbind(x, circle)
names(z)[names(z) == "geometry"] <- "points"
st_geometry(z)<-"buffer"
return(z)
}
setwd(gis_data)
coastline<-st_read("./ne_50m_land/ne_50m_land.shp")
# download from online. Basin is eastern pacific
# h<-get_hurdat(basin="EP")
# saveRDS(h, "r_objects/hurdat.R")
h<-readRDS("r_objects/hurdat.R")
# h<-filter(h, between(Lon,-113,-108)) %>% filter(., between(Lat, 18,22))
### user defined: ####
# prior and post for time frame of woa or ODZ in days
function_variables$h.prior<-21
function_variables$h.post<-21
# Mike's  deliminations: Only need to go to 30 N and 150 W on one corner.  Also 80 W is far enough. .. (implied = 0 south so just use 0.00)
function_variables$h.lon_max<--90 # need to improve here
function_variables$h.lon_min<--150
function_variables$h.lat_max<-30
# function_variables$h.lat_min<-0
# radius around TS in m
function_variables$h.radi<-100000
# # radius around TS in degrees
# function_variables$h.radi<-0.5
### dynamic ####
#from hurdat dataset
#
# function_variables$h.lat_max<-max(h$Lat)
function_variables$h.lat_min<-min(h$Lat)
# function_variables$h.lon_max<-max(h$Lon[h$Lon < 0])
# function_variables$h.lon_min<-min(h$Lon)
# function_variables$h.lat_max<-max(h$Lat)
function_variables$selection<-paste0("Lat (", function_variables$h.lat_min, ", ", function_variables$h.lat_max, ") Lon (", function_variables$h.lon_min, ", ", function_variables$h.lon_max,  ")")
x<-filter(h, Status == "HU")
h.pts<- sf::st_as_sf(x, coords = c("Lon","Lat"), crs = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
h.pts<-sf::st_crop(h.pts, c(xmin=function_variables$h.lon_min, ymin=function_variables$h.lat_min, xmax=function_variables$h.lon_max, ymax=function_variables$h.lat_max)) #subset by uset defined
rm(x)
# cl<-st_crop(coastline, xmin=-170, ymin=-20, xmax=-80, ymax=40) # change here based on desired figure size
cl<-st_crop(coastline, xmin=function_variables$h.lon_min, ymin=function_variables$h.lat_min, xmax=function_variables$h.lon_max, ymax=function_variables$h.lat_max)
# cl<-st_crop(coastline, xmin=min(h$Lon), ymin=min(h$Lat), xmax=max(h$Lon), ymax=max(h$Lat))
m.coast <- ggplot()+ geom_sf(data =cl, size=0.5)+ theme(axis.title.x=element_blank(), axis.title.y=element_blank())+
theme_bw()+ theme(text = element_text(size =12))
#'Selection' variable created in different code cell
# option 1
# m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.pts, size=.25)+ggtitle(paste0("Hurricanes: ", Selection))+ labs(color = "Wind speed (m/s)")
# m.map
#option 2
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.pts, size=.25)+scale_color_cmocean(name="dense", direction= 1)+ggtitle(paste0("Hurricanes: ", function_variables$selection)) + labs(color = "Wind speed (m/s)")
m.map
rm(m.map, cl)
h.buf<-f.buffer_select(h.pts, function_variables)
m.map<-m.coast+geom_sf(data =h.buf, fill = NA, color = gray(.5))+geom_sf(data=h.pts, size= .25) + ggtitle("100 km radius")
# + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
m.map
m.map<-m.coast+geom_sf(data=h.pts[1,], size= .25)+geom_sf(data =h.buf[1,], fill = NA, color = gray(.5)) + ggtitle("100 km radius")
# + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
m.map
m.map<-ggplot()+geom_sf(data=h.pts[1,], size= .25)+geom_sf(data =h.buf[1,], fill = NA, color = gray(.5)) + ggtitle("100 km radius")
# + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
m.map
m.map<-m.coast+geom_sf(data =h.buf, fill = NA, color = gray(.5))+geom_sf(data=h.pts, size= .25) + ggtitle("100 km radius")
# + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
m.map
m.map<-ggplot()+geom_sf(data=h.pts[1,], size= .25)+geom_sf(data =h.buf[1,], fill = NA, color = gray(.5)) + ggtitle("100 km radius")
# + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
m.map
m.map<-m.coast+geom_sf(data =h.buf, fill = NA, color = gray(.5))+geom_sf(data=h.pts, size= .25) + ggtitle(paste0("100 km radius: ", function_variables$selection))
# + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
m.map
m.map<-ggplot()+geom_sf(data=h.pts[1,], size= .25)+geom_sf(data =h.buf[1,], fill = NA, color = gray(.5)) + ggtitle("100 km radius")
# + theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
m.map
#### option 2 tidync package ####
file<-(file.path(data_d, "odz_atlas/nc_depth.nc"))
x<-tidync(file)
x
y<-x%>% hyper_tibble()
head(y)
y<-hyper_filter(x$variable$name)
x
y<-hyper_filter(x, numbObs)
y<-hyper_filter(x, numObs)
x[1]
x
x$grid
x$nvars
x$grid$variables
x$grid$variables$numObs
x$grid$variables$
x$grid$variables[[``]]
x$grid$variables[[`1]]
x$grid$variables[[1]]
x$grid$variables[[1]]$variable
x<-tidync(file) %>% activate(numObs)
x
x<-tidync(file) %>% hyper_tibble(select_var = varname)
x<-tidync(file) %>% hyper_tibble(select_var = numObs)
x<-tidync(file) %>% hyper_tibble(select_var = "numObs")
x
str(x)
View(x)
View(x)
rm(y)
x[]
x[1]
x[1,1,1]
x[1,1,1,1]
x[1,1,1,2]
x[1,1,1,100]
head(x)
dim(x)
test<-x[,1,1,]
test
dim(x$Depth)
length(x$Depth)
dim(x)
sum(test)
test<-x[,1,1,1]
test
test<-x[,1,1,(1:length(unique(x$Depth))]
test<-x[,1,1,(1:length(unique(x$Depth))]
length(unique(x$Depth)
_)
length(unique(x$Depth))
test<-x[,1,1,(1:length(unique(x$Depth)))]
test
test<-x[(1:50),1,1,(1:length(unique(x$Depth)))]
test
df <- tibble(id = 1:4, w = runif(4), x = runif(4), y = runif(4), z = runif(4))
df
df %>%
rowwise() %>%
mutate(
sum = sum(c_across(lat:lon))
)
df <- tibble(num = 1:4, lat = runif(4), lon = runif(4), z = runif(4))
df %>%
rowwise() %>%
mutate(
sum = sum(c_across(lat:lon))
)
df
df <- tibble(num = 1:4, lat = runif(4), lon = runif(4), z = runif(4))
df
y<-x
x
y<-group_by(Latitude && Longitude) %>% summarise(sumobs= sum(numobs))
y %>% group_by(y$Latitude && y$Longitude) %>% summarise(y%sumobs= sum(y$numobs))
y
y %>% group_by(y, Latitude && Longitude) %>% summarise(sumobs= sum(numobs))
y
rm(y)
y<-x %>% group_by(Latitude && Longitude) %>% summarise(sumobs= sum(numobs))
y<-x %>% group_by(Latitude && Longitude) %>%
y<-x%>% group_by(Latitude && Longitude) %>% summarise(sum_obs = sum(numObs))
dim(y)
y
y<-x%>% group_by(Latitude, Longitude) %>% summarise(sum_obs = sum(numObs))
y
summary(y)
rm(x)
str(y)
dim(y)
View(y)
y<-filter(y, sum_obs >1)
dim(y)
file<-(file.path(data_d, "odz_atlas/nc_depth.nc"))
x<-tidync(file) %>% hyper_tibble(select_var = "numObs")
y<-x%>% group_by(Latitude && Longitude) %>% summarise(sum_obs = sum(numObs)) %>% filter(., sum_obs >1)
dim(y)
file<-(file.path(data_d, "odz_atlas/nc_depth.nc"))
x<-tidync(file) %>% hyper_tibble(select_var = "numObs")
y<-x%>% group_by(Latitude && Longitude) %>% summarise(sum_obs = sum(numObs)) %>% filter(., sum_obs >1)
y
file<-(file.path(data_d, "odz_atlas/nc_depth.nc"))
x<-tidync(file) %>% hyper_tibble(select_var = "numObs")
y<-x%>% group_by(Latitude, Longitude) %>% summarise(sum_obs = sum(numObs)) %>% filter(., sum_obs >1)
y
summary(y)
str(y)
y<-x%>% group_by(Latitude, Longitude) %>% summarise(sum_obs = sum(numObs)) %>% filter(., sum_obs >1) %>% as.data.frame(.) #return 2d
y
x<-as.raster(y)
x<-raster(y)
file<-(file.path(data_d, "odz_atlas/nc_depth.nc"))
x<-tidync(file) %>% hyper_tibble(select_var = "numObs")
y<-x%>% group_by(Longitude, Latitude) %>% summarise(sum_obs = sum(numObs)) %>% filter(., sum_obs >1) %>% as.data.frame(.) #return 2d
y
x<-rasterFromXYZ(y)
plot(x)
summary(y)
summary(y)[3]
summary(y)[,]
dim(summary(y))
summary(y)[,3]
summary(y)[3,3]
summary(y)[3,3][1]
summary(y)[3,3][2]
print(paste0("Number of obsevationsn per gird cell:", summary(y)[3,3]))
print(paste0("Number of obsevationn per gird cell: ", summary(y)[3,3]), "for cells with a minimum of one observation")
print(paste0("Number of obsevationn per gird cell: ", summary(y)[3,3], " for cells with a minimum of one observation"))
print(paste0("For cells with a minimum of one observation the ", summary(y)[3,3]))
crs(x) <- "+proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0"
plot(x)
numobs.raster<-x
numobs.raster<-x
rm(x,y)
rm(df)
rm(m.map)
x<-fasterize(h.buf, numobs, fun="sum")
x<-fasterize(h.buf, numobs, field=NULL, fun="sum")
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
# packages<-c("stars", "gridExtra", "cowplot", "sf", "ggspatial","stringr","sp", "rgdal",  "rgeos", "raster","readr" ,"tidyverse", "ggplot2", "lubridate",  "ggthemes", "data.table", "reshape2", "RColorBrewer", "marmap", "extrafont", "oce", "MODIS", "measurements")  # set packages here
#tidyverse is all of the following packages: ggplot2, dplyr, tidyr, readr, purr, tibble, sringr, & forcats.
packages<-c("sp", "rgdal",  "rgeos", "raster","readr" ,"tidyverse", "lubridate",  "ggthemes", "HURDAT", "sf", "cmocean", "ncdf4", "RNetCDF",  "plot3D", "tidync", "devtools", "stars", "ncmeta", "maps", "oce", "data.table", "fasterize")
f.ipak(packages)
rm(f.ipak, packages)
knitr::opts_chunk$set(echo = FALSE)
x<-fasterize(h.buf, numobs, field=NULL, fun="sum")
x<-fasterize(h.buf, numobs.raster, field=NULL, fun="sum")
plot(x)
str(x)
x<-fasterize(h.buf, numobs.raster, field=NULL, fun="any")
plot(x)
res(x)
st_bbox(h.buf)
crs(x)
extent(h.buf)
extent(x)<-extent(h.buf)
plot(x)
extent9h.buf
extent(h.buf)
extent(x)
x<-fasterize(h.buf, numobs.raster, field=NULL, fun="any")
extent(x)
extent(x)<-extent(h.buf)
# creat raster from buffers
x<-fasterize(h.buf, numobs.raster, field=NULL, fun="any")
extent(x)<-extent(h.buf)
plot(x)
y<-intersect(x, numobs.raster)
y
y<-intersect(numobs.raster, x)
y
x
plot(x)
plot(numobs.raster, add=T)
x<-fasterize(h.buf, numobs.raster, field=NULL, fun="any")
extent(x)<-extent(numobs.raster)
y<-intersect(numobs.raster, x)
y
y<-intersect(x, numobs.raster)
y
ploy(numobs.raster)
plot(numobs.raster)
plot(x, add=T)
y<-intersect(x, numobs.raster)
y
str(x)
y<-st_intersect(x, numobs.raster)
y<-st_intersection(x, numobs.raster)
y<-raster::intersect(x, numobs.raster)
y
y
ploy(y)
plot(y)
y<-as.raster(raster::intersect(x, numobs.raster))
plot(y)
x<-as.raster(fasterize(h.buf, numobs.raster, field=NULL, fun="any"))
extent(x)<-extent(numobs.raster)
x
plot(x)
x<-raster(fasterize(h.buf, numobs.raster, field=NULL, fun="any"))
x
plot(x)
x<-fasterize(h.buf, numobs.raster, field=NULL, fun="any")
head(x)
x
plot(x)
str(r)
str(x)
crs9x
crs(x)
crs(numobs.raster)
extent(x)
extent(numobs.raseter)
extent(numobs.raster)
extent(h.buff)
extent(h.buf)
x<-fasterize(h.buf, numobs.raster, field=NULL, fun="any")
extent(x)<-extent(h.buf)
extent(numobs.raster)<-extent(h.buf)
plot(x)
plot(numobs.raster, add=T)
plot(numobs.raster)
plot(x, add=T)
plot(x)
plot(numobs.raster, col="black", add=T)
# creat raster from buffers
x<-fasterize(h.buf, numobs.raster, field=NULL, fun="any")
extent(x)<-extent(h.buf)
extent(numobs.raster)<-extent(h.buf)
plot(x)
plot(numobs.raster, col="black", add=T)
#intersection does not work???
y<-st_intersection(x, numobs.raster)
# creat raster from buffers
x<-fasterize(h.buf, numobs.raster, field=NULL, fun="any")
extent(x)<-extent(h.buf)
extent(numobs.raster)<-extent(h.buf)
plot(x)
plot(numobs.raster, col="black", add=T)
#intersection does not work???
# y<-st_intersection(x, numobs.raster)
#
# y<-raster::intersect(x, numobs.raster)
dev.off()
# creat raster from buffers
x<-fasterize(h.buf, numobs.raster, field=NULL, fun="any")
extent(x)<-extent(h.buf)
extent(numobs.raster)<-extent(h.buf)
plot(x)
plot(numobs.raster, col="black", add=T)
#intersection does not work???
# y<-st_intersection(x, numobs.raster)
#
# y<-raster::intersect(x, numobs.raster)
# y<-st_intersection(x, numobs.raster)
#
y<-raster::intersect(x, numobs.raster)
y
plot(y)
# y<-st_intersection(x, numobs.raster)
#
y<-raster::intersect(numobs.raster,x)
y
plot(y)
plot(numobs.raster, add=T, col="black")
plot(y)
numobs.raster
# y<-st_intersection(x, numobs.raster)
#
y<-intersect(numobs.raster,x)
y
# y<-st_intersection(x, numobs.raster)
#
y<-raster::intersect(numobs.raster,x)
y
plot(y)
plot(x)
plot(x)
plot(numobs.raster, col="black", add=T)
dev.off()
plot(x)
plot(numobs.raster, col="black", add=T)
plot(x)
plot(numobs.raster, col="black", add=T)
plot(y, col="white", add=T)
y
# creat raster from buffers
x<-fasterize(h.buf, numobs.raster, field=NULL, fun="any")
extent(x)<-extent(h.buf)
extent(numobs.raster)<-extent(h.buf)
#intersection does not work???
# y<-st_intersection(x, numobs.raster)
#
overlap<-raster::intersect(numobs.raster,x)
plot(x)
plot(numobs.raster, col="red", add=T)
plot(yverlap, col="black", add=T, main="overlap ODZ and hurrincan buffer. ")
# creat raster from buffers
x<-fasterize(h.buf, numobs.raster, field=NULL, fun="any")
extent(x)<-extent(h.buf)
extent(numobs.raster)<-extent(h.buf)
#intersection does not work???
# y<-st_intersection(x, numobs.raster)
#
overlap<-raster::intersect(numobs.raster,x)
plot(x)
plot(numobs.raster, col="red", add=T)
plot(overlap, col="black", add=T, main="overlap ODZ and hurrincan buffer. ")
plot(x)
plot(numobs.raster, col="red", add=T)
plot(x)
plot(numobs.raster, col="red", add=T)
plot(overlap, col="black", add=T, main="overlap ODZ and hurrincan buffer. ")
dev.off()
plot(x)
plot(numobs.raster, col="red", add=T)
plot(overlap, col="black", add=T, main="overlap ODZ and hurrincan buffer")
# y<-st_intersection(x, numobs.raster)
#
overlap<-raster::intersect(x, numobs.raster)
# creat raster from buffers
x<-fasterize(h.buf, numobs.raster, field=NULL, fun="any")
extent(x)<-extent(h.buf)
extent(numobs.raster)<-extent(h.buf)
#intersection does not work???
# y<-st_intersection(x, numobs.raster)
#
overlap<-raster::intersect(x, numobs.raster)
plot(x)
plot(numobs.raster, col="red", add=T)
plot(overlap, col="black", add=T, main="overlap ODZ and hurrincan buffer")
y<- extract(x, numobs.raster)
x<-fasterize(h.buf, numobs.raster, field=NULL, fun="any")
extent(x)<-extent(h.buf)
extent(numobs.raster)<-extent(h.buf)
# y<-st_intersection(x, numobs.raster)
#
overlap<-raster::crop(x, numobs.raster)
plot(overlap)
# y<-st_intersection(x, numobs.raster)
#
overlap<-raster::crop(numobs.raster,x)
plot(overlap)
plot(numobs.raster, col="red")
plot(overlap, col="black", add=T, main="overlap ODZ and hurrincan buffer")
plot(numobs.raster, col="red")
plot(overlap, col="black", add=T, main="overlap ODZ and hurrincan buffer")
plot(numobs.raster, col="red)
plot(numobs.raster, col="red")
plot(numobs.raster, col="red")
plot(overlap, col="black", add=T, main="overlap ODZ and hurrincan buffer")
dev.off()
plot(x)
plot(overlap, col="black", add=T, main="overlap ODZ and hurrincan buffer")
# y<-st_intersection(x, numobs.raster)
#
overlap<-raster::crop(numobs.raster,x)
# creat raster from buffers
x<-fasterize(h.buf, numobs.raster, field=NULL, fun="any")
extent(x)<-extent(h.buf)
extent(numobs.raster)<-extent(h.buf)
y<- extract(x, numobs.raster)
# creat raster from buffers
x<-fasterize(h.buf, numobs.raster, field=NULL, fun="any")
extent(x)<-extent(h.buf)
extent(numobs.raster)<-extent(h.buf)
# y<- extract(x, numobs.raster)
# z <- numobs.raster[!is.na(z), ]
#intersection does not work???
# y<-st_intersection(x, numobs.raster)
#
overlap<-raster::crop(numobs.raster,x)
# plot(x)
plot(numobs.raster, col="red")
plot(overlap, col="black", add=T, main="overlap ODZ and hurrincan buffer")
plot(numobs.raster, color="red")
plot(numobs.raster, col="red")
plot(overlap, col="black", add=T, main="overlap ODZ and hurrincan buffer")
plot(x)
plot(overlap, col="black", add=T, main="overlap ODZ and hurrincan buffer")
# y<-st_intersection(x, numobs.raster)
#
overlap<-raster::crop(numobs.raster, h.buf)
plot(x)
plot(overlap, col="black", add=T, main="overlap ODZ and hurrincan buffer")
# y<-st_intersection(x, numobs.raster)
#
overlap<-raster::crop(numobs.raster, st_geometry(h.buf))
str(x)
# y<-st_intersection(x, numobs.raster)
#
overlap<-crop(numobs.raster, x)
plot(overlap)
# y<-st_intersection(x, numobs.raster)
#
overlap<-mask(numobs.raster, x)
plot(overlap)
plot(numobs.raster, col="red")
plot(overlap, col="black", add=T, main="overlap ODZ and hurrincan buffer")
plot(x)
plot(numobs.raster, col="red", add=T)
plot(overlap, col="black", add=T, main="overlap ODZ and hurrincan buffer")
# y<-st_intersection(x, numobs.raster)
#
overlap.odz<-mask(numobs.raster, x)
overlap.h<-mask(x, numobs.raster)
plot(overlap.h)
