rm(f.ipak, packages)
knitr::opts_chunk$set(echo = FALSE)
# cl<-st_crop(coastline, xmin=-170, ymin=-20, xmax=-80, ymax=40) # change here based on desired figure size
cl<-st_crop(coastline, xmin=function_variables$h.lon_min, ymin=function_variables$h.lat_min, xmax=function_variables$h.lon_max, ymax=function_variables$h.lat_max)
m.coast <- ggplot()+ geom_sf(data =cl, size=0.5)+ theme(axis.title.x=element_blank(), axis.title.y=element_blank())+
theme_bw()+ theme(text = element_text(size =12))
Selection<-paste0("Lat (", function_variables$h.lat_min, ", ", function_variables$h.lat_max, ") Lon (", function_variables$h.lon_min, ", ", function_variables$h.lon_max,  ")")
n<-30
custom_color<-cmocean('wind', version="2.0")(n)
# cl<-st_crop(coastline, xmin=-170, ymin=-20, xmax=-80, ymax=40) # change here based on desired figure size
cl<-st_crop(coastline, xmin=function_variables$h.lon_min, ymin=function_variables$h.lat_min, xmax=function_variables$h.lon_max, ymax=function_variables$h.lat_max)
m.coast <- ggplot()+ geom_sf(data =cl, size=0.5)+ theme(axis.title.x=element_blank(), axis.title.y=element_blank())+
theme_bw()+ theme(text = element_text(size =12))
Selection<-paste0("Lat (", function_variables$h.lat_min, ", ", function_variables$h.lat_max, ") Lon (", function_variables$h.lon_min, ", ", function_variables$h.lon_max,  ")")
n<-30
custom_color<-cmocean('speed', version="2.0")(n)
m.map<-m.coast+geom_sf(mapping = aes(color=Wind), data=h.sf, size=.25, col=custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
# cl<-st_crop(coastline, xmin=-170, ymin=-20, xmax=-80, ymax=40) # change here based on desired figure size
cl<-st_crop(coastline, xmin=function_variables$h.lon_min, ymin=function_variables$h.lat_min, xmax=function_variables$h.lon_max, ymax=function_variables$h.lat_max)
m.coast <- ggplot()+ geom_sf(data =cl, size=0.5)+ theme(axis.title.x=element_blank(), axis.title.y=element_blank())+
theme_bw()+ theme(text = element_text(size =12))
Selection<-paste0("Lat (", function_variables$h.lat_min, ", ", function_variables$h.lat_max, ") Lon (", function_variables$h.lon_min, ", ", function_variables$h.lon_max,  ")")
n<-30
custom_color<-cmocean('speed', version="2.0")(n)
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25, col=custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25, color=white)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25, color="white")+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25, col=custom_color)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(Wind), data=h.sf, size=.25, col=custom_color)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(Wind), data=h.sf, size=.25)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(x=Wind), data=h.sf, size=.25)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size=.25, col=custom_color)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size=.25, col=custom)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size=.25, col=custom_color)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size=.25)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(x=Wind, colour=custom_color), data=h.sf, size=.25)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(x=Wind), data=h.sf, size=.25)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind, col=custom_color), data=h.sf, size=.25)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind, col=custom_color), data=h.sf, size=.25, col=custom_color)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25, col=custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=custom_color), data=h.sf$wind, size=.25, col=custom_color)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(), data=h.sf$wind, size=.25, col=custom_color)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(Wind), data=h.sf, size=.25, col=custom_color)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25, col=custom_color)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+ scale_fill_manual(values = custom_color)+scale_fill_gradientn(colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+ +scale_fill_gradientn(values = custom_color, colours= custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+scale_fill_gradientn(values = custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+scale_fill_gradientn(col = custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+scale_fill_gradientn(colors = custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+scale_fill_gradientn(values = custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind, colour=custom_color), data=h.sf, size=.25)+scale_fill_gradientn(colors = custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind, colour=custom_color), data=h.sf, size=.25)+scale_fill_gradientn(colours = custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+scale_fill_gradientn(colours = custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(Wind), data=h.sf, size=.25)+scale_fill_gradientn(colours = custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(color=Wind), data=h.sf, size=.25)+scale_fill_gradientn(colours = custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
custom_color<-cmocean('speed', version="2.0")(n)
points<-geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)++scale_fill_gradientn(colours = custom_color)+ggtitle(paste0("Hurricanes: ", Selection))+
m.map<-m.coast+points
points<-geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)++scale_fill_gradientn(colours = custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map<-m.coast+points
points<-geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+scale_fill_gradientn(colours = custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map<-m.coast+points
points<-ggplot()+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+scale_fill_gradientn(colours = custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map<-m.coast+points
# works:
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
# works:
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
# works:
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
# works:
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size=.25)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+scale_fill_gradientn(colours = custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size=.25)+scale_fill_gradientn(colours = custom_color)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
# improve here:
n<-30
custom_color<-cmocean('speed', version="2.0")(n)
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size=.25)+ggtitle(paste0("Hurricanes: ", Selection))
m.map+scale_fill_gradientn(colours = custom_color)
m.map +scale_fill_cmocean(name='speed')
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size=.25)+ggtitle(paste0("Hurricanes: ", Selection))+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+ggtitle(paste0("Hurricanes: ", Selection))+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)+ggtitle(paste0("Hurricanes: ", Selection))+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(mapping = aes(Wind), data=h.sf, size=.25)+geom_point()+ggtitle(paste0("Hurricanes: ", Selection))+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(, data=h.sf, size=.25)+geom_point(mapping = aes(Wind))+ggtitle(paste0("Hurricanes: ", Selection))+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf( data=h.sf, size=.25)+geom_point(mapping = aes(Wind))+ggtitle(paste0("Hurricanes: ", Selection))+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(data=h.sf)+geom_point(data = Wind, aes(x = Lon, y = Lat), size=.25)+ggtitle(paste0("Hurricanes: ", Selection))+scale_fill_cmocean(name="speed")
m.map<-m.coast+geom_sf(data=h.sf)+geom_point(aes(x =Wind), size=.25)+ggtitle(paste0("Hurricanes: ", Selection))+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(data=h.sf)+geom_point(aes(Wind), size=.25)+ggtitle(paste0("Hurricanes: ", Selection))+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(data=h.sf)+geom_point(aes(h.sf$Wind), size=.25)+ggtitle(paste0("Hurricanes: ", Selection))+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(data=h.sf, aes(Wind))+geom_point(size=.25)+ggtitle(paste0("Hurricanes: ", Selection))+scale_fill_cmocean(name="speed")
m.map
str(h.sf)
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25)
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size=.25)
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size=.25)+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size=.25)+scale_fill_viridis_c(option = "D", direction = -1)
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25, coor =NA)+scale_fill_viridis_c(option = "D", direction = -1)
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25, color =NA)+scale_fill_viridis_c(option = "D", direction = -1)
m.map
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25, color =NA)+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(aes(fill=Wind), data=h.sf, size=.25, color =NA)+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(aes(fill=Wind), data=h.sf, color =NA)+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(aes(Wind), data=h.sf, color =NA)+scale_fill_cmocean(name="speed")
m.map
wind<-h.sf["wind"]
wind<-h.sf["Wind"]
wind
m.map<-m.coast+geom_sf(aes(fill=values), data=wind, color =NA)+scale_fill_cmocean(name="speed")
m.map
wind
m.map<-m.coast+geom_sf(aes(fill=Wind), data=wind, color =NA)+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(aes(), data=wind, color =NA)+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(aes(), data=wind, color =NA)+geom_point()+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(aes(x=x, y=y, fill=Wind), data=wind, color =NA)+geom_point()+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(aes(x=x, y=y, fill=Wind), data=wind, color =NA)+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(aes(fill=Wind), data=wind, color =NA)+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25, color= NA)+scale_fill_manual(Wind =custom_colors)
custom_colors<-cmocean('speed', version="2.0")(30)
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25, color= NA)+scale_fill_manual(Wind =custom_colors)
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25, color= NA)+scale_fill_manual(Wind =custom_colors, drop =FALSE)
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25, color= NA)+scale_fill_gradient(Wind =custom_colors)
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, size=.25, color= NA)+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, color= NA)+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, color= NA)+scale_fill_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf, color= NA)
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, color= NA)
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf)
m.map
m.map<-m.coast+geom_sf(mapping = aes(fill=Wind), data=h.sf)
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf)+scale_color_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size= .25)+scale_color_cmocean(name="speed")
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size= .25)+scale_color_cmocean(name="speed")+ggtitle(paste0("Hurricanes: ", Selection))
m.map
#option 2
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size= .25)+scale_color_cmocean(name="deep")+ggtitle(paste0("Hurricanes: ", Selection))
m.map
#option 2
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size= .25)+scale_color_cmocean(name="thermal")+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size= .25)+scale_color_cmocean(name="thermal", direction= 1)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size= .25)+scale_color_cmocean(name="thermal", direction= 2)+ggtitle(paste0("Hurricanes: ", Selection))
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size= .25)+scale_color_cmocean(name="thermal", direction= -1)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size= .25)+scale_color_cmocean(name="haline", direction= -1)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size= .25)+scale_color_cmocean(name="dense", direction= -1)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size= .25)+scale_color_cmocean(name="dense", direction= 1)+ggtitle(paste0("Hurricanes: ", Selection))
m.map
#option 2
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size= .25)+scale_color_cmocean(name="dense", direction= 1)+ggtitle(paste0("Hurricanes: ", Selection)) + + labs(color = "Wind speed (m/s)")
#option 2
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size= .25)+scale_color_cmocean(name="dense", direction= 1)+ggtitle(paste0("Hurricanes: ", Selection)) + + labs(Wind = "Wind speed (m/s)")
#option 2
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size= .25)+scale_color_cmocean(name="dense", direction= 1)+ggtitle(paste0("Hurricanes: ", Selection)) + labs(Wind = "Wind speed (m/s)")
m.map
#option 2
m.map<-m.coast+geom_sf(mapping = aes(col=Wind), data=h.sf, size= .25)+scale_color_cmocean(name="dense", direction= 1)+ggtitle(paste0("Hurricanes: ", Selection)) + labs(color = "Wind speed (m/s)")
m.map
rm(winds)
rm(m.map, m.coast, cl)
rm(wind, points)
x<-nc_open(file.path(data_d, "odz_atlas/nc_depth.nc"))
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
# packages<-c("stars", "gridExtra", "cowplot", "sf", "ggspatial","stringr","sp", "rgdal",  "rgeos", "raster","readr" ,"tidyverse", "ggplot2", "lubridate",  "ggthemes", "data.table", "reshape2", "RColorBrewer", "marmap", "extrafont", "oce", "MODIS", "measurements")  # set packages here
packages<-c("sp", "rgdal",  "rgeos", "raster","readr" ,"tidyverse", "ggplot2", "lubridate",  "ggthemes", "HURDAT", "sf", "cmocean", "ncdf4")
f.ipak(packages)
rm(f.ipak, packages)
knitr::opts_chunk$set(echo = FALSE)
x<-nc_open(file.path(data_d, "odz_atlas/nc_depth.nc"))
lat<-ncvar_get(x, "Latitude")
head(lat)
dim(lat)
lon<-ncvar_get(x, "Longitude")
z<-ncvar_get(x, "Depth")
head(z)
obs<-ncvar_get(x, "numObs")
dim(obs)
plot(obs)
rm(list=ls())
# relative directories
robj<-"r_objects"
fig<-"../../figures"
gis_data<-"../../data/gis_data"
# data_d<-"../../data/2018_data"
data_d<-"../../data"
ocean_color<-"../../data/ocean_color_bud"
bathy_d<-"../../data/bathy" # edit this
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
# packages<-c("stars", "gridExtra", "cowplot", "sf", "ggspatial","stringr","sp", "rgdal",  "rgeos", "raster","readr" ,"tidyverse", "ggplot2", "lubridate",  "ggthemes", "data.table", "reshape2", "RColorBrewer", "marmap", "extrafont", "oce", "MODIS", "measurements")  # set packages here
packages<-c("sp", "rgdal",  "rgeos", "raster","readr" ,"tidyverse", "ggplot2", "lubridate",  "ggthemes", "HURDAT", "sf", "cmocean", "ncdf4")
f.ipak(packages)
rm(f.ipak, packages)
knitr::opts_chunk$set(echo = FALSE)
function_variables<-vector(mode="list") # for storing all function variables that may be dynamic or other wise
#
# # select an individual storm by name OR  key fromm hurdat, "h" datsetset
# f.select_ts<-function(key_id){
# # can use or operator io incle storm name
# x<-filter(h, Key == key_id)
# # assign(key_id, x)
# # rm(x, key_id)
# # x<-ls()
# # return(x[1])
# }
#
#
#
# # function to spatial select TS
# f.h_spatial-function(h, lat_max, lat_min, lon_min, lon_max){
#   #bound
#
#   return()
# }
#
# # function to spatial select odz actual in-situ data or secondary products
# f.odz_actual_spatial<-function(odz_a, lat_max, lat_min, lon_min, lon_max){}
#
# # function to spatial select woa actual in-situ data or secondary products
# f.woa_actual_spatial<-function(woa_a, lat_max, lat_min, lon_min, lon_max){}
#
# # function to spatial select odz interpolated products
# f.odz_interpolated_spatial<-function(odz_i, lat_max, lat_min, lon_min, lon_max){}
#
# # function to spatial select woa interpolated  products
# f.woa_interpolated_spatial<-function(woa_i, lat_max, lat_min, lon_min, lon_max){}
#
#
# f.select_up<-function()
#
# download from online. Basin is eastern pacific
# h<-get_hurdat(basin="EP")
# saveRDS(h, "r_objects/hurdat.R")
h<-readRDS("r_objects/hurdat.R")
### user defined: ####
# prior and post for time frame of woa or ODZ in days
function_variables$h.prior<-21
function_variables$h.post<-21
# Mike's  deliminations: Only need to go to 30 N and 150 W on one corner.  Also 80 W is far enough. .. (implied = 0 south so just use 0.00)
function_variables$h.lon_max<--90 # need to improve here
function_variables$h.lon_min<--150
function_variables$h.lat_max<-30
# function_variables$h.lat_min<-0
# radius around TS in km
function_variables$h.radi<-500
### dynamic ####
#from hurdat dataset
#
# function_variables$h.lat_max<-max(h$Lat)
function_variables$h.lat_min<-min(h$Lat)
# function_variables$h.lon_max<-max(h$Lon[h$Lon < 0])
# function_variables$h.lon_min<-min(h$Lon)
# function_variables$h.lat_max<-max(h$Lat)
Selection<-paste0("Lat (", function_variables$h.lat_min, ", ", function_variables$h.lat_max, ") Lon (", function_variables$h.lon_min, ", ", function_variables$h.lon_max,  ")")
# from remote sensiong code. edit this
# step one simple 3 dminsiol array
x<-nc_open(file.path(data_d, "odz_atlas/nc_depth.nc"))
lat<-ncvar_get(x, "Latitude")
lon<-ncvar_get(x, "Longitude")
z<-ncvar_get(x, "Depth")
obs<-ncvar_get(x, "numObs")
nc_close(x)
# come back here:
# derivdepth<-ncvar_get(x, "maxDerivDepth")
# fodz<-ncvar_get(x, "fODZ")
# o2<-ncvar_get(x, "O2")
#
# list.files(file.path(data_d, "odz_atlas"))
#
# f.tmp1<-function(x){
#   y<-nc_open(x)
#   chl<-ncvar_get(y, 'chlor_a')
#   lon<-ncvar_get(y, 'lon')
#   lat<-ncvar_get(y, 'lat')
#   rownames(chl)<-lon
#   colnames(chl)<-lat
#   nc_close(y)
#   rm(y)
#   x<-chl
#   return(x)
# }
#
# f.tmp2<-function(x){
#   y<-nc_open(x)
#   # start<-ncatt_get(y, attname = 'time_coverage_start', varid = 0, verbose=F)
#   # start<-start$value
#   # start<-ymd_hms(start)
#   # start<-with_tz(start, tz="US/Mountain")
#
#   end<-ncatt_get(y, attname = 'time_coverage_end', varid = 0, verbose=F)
#   end<-end$value
#   end<-ymd_hms(end)
#   end<-with_tz(end, tz="US/Mountain")
#   # time<-c(start, end, (end-start))
#   day<-day(end)
#   nc_close(y)
#   # rm(y, start, end)
#   rm(y, end)
#
#   return(as.character(day))
#
#
#   lon<-ncvar_get(y, 'lon')
#   lat<-ncvar_get(y, 'lat')
#   rownames(chl)<-lon
#   colnames(chl)<-lat
#   nc_close(y)
#   rm(y)
#   x<-chl
#   return(x)
# }
#
# etwd(wd)
# setwd(aqua_directory)
# files<-list.files()
#
# a<-lapply(files, f.tmp1)
# dates<-lapply(files, f.tmp2)
# names(a)<-as.character(dates)
# rm(files, directory, dates)
test<-odz[,,1]
dim(obs)
dim(z)
z
test<-obs[,,1]
dim(test)
plot(test)
head(test)
summary(test)
str(test)
dim(test)
dim(lon)
dim(lat)
install.packages("plot3D")
plot3D(obs)
scatter3D(obs)
librar(Plot3d)
library("Plot3D")
library("plot3D")
scatter3D(obs)
dim(obs)
scatter3D(obs[1], obs[2], obs[3])
plot(obs[1])
plot(obs[2])
plot(obs[3])
scatter3D(obs[1:256,,,], obs[,1:230,], obs[,,1:50])
scatter3D(obs[(1:256),,], obs[,(1:230),], obs[,,(1:50)])
str(obs)
dim(obs)
dim(lat)
install.packages("tidync")
install.packages("tidync", dependencies = T)
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
# packages<-c("stars", "gridExtra", "cowplot", "sf", "ggspatial","stringr","sp", "rgdal",  "rgeos", "raster","readr" ,"tidyverse", "ggplot2", "lubridate",  "ggthemes", "data.table", "reshape2", "RColorBrewer", "marmap", "extrafont", "oce", "MODIS", "measurements")  # set packages here
packages<-c("sp", "rgdal",  "rgeos", "raster","readr" ,"tidyverse", "ggplot2", "lubridate",  "ggthemes", "HURDAT", "sf", "cmocean", "ncdf4", "plot3D", "tidync")
f.ipak(packages)
rm(f.ipak, packages)
knitr::opts_chunk$set(echo = FALSE)
dim(obs)
str(obs)
obs[,,1]
str(obs[,,1])
dim(obs[,,1])
z
lat
lon
obs[,,1:50]
scatter3D(obs[,,])
dim(obs)
dim(obs)[1]
test<-obs[1:dim(obs)[1],1,1]
test
test<-obs[1:dim(obs)[1],,]
test
x<-obs[1:dim(obs)[1],1,1]
y<-obs[1,1:dim(obs)[2],1]
z<-obsbs[1,1,1:dim(obs)[3]]
x<-obs[(1:dim(obs)[1]),1,1]
y<-obs[1,(1:dim(obs)[2]),1]
z<-obsbs[1,1,(1:dim(obs)[3])]
x<-obs[(1:dim(obs)[1]),1,1]
y<-obs[1,(1:dim(obs)[2]),1]
z<-obs[1,1,(1:dim(obs)[3])]
scatter3D(x,y,z)
y
x
z
x<-tidync(file.path(data_d, "odz_atlas/nc_depth.nc"))
file.path(data_d, "odz_atlas/nc_depth.nc")
rm(list=ls())
# relative directories
robj<-"r_objects"
fig<-"../../figures"
gis_data<-"../../data/gis_data"
# data_d<-"../../data/2018_data"
data_d<-"../../data"
ocean_color<-"../../data/ocean_color_bud"
bathy_d<-"../../data/bathy" # edit this
knitr::opts_chunk$set(echo = TRUE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
# packages<-c("stars", "gridExtra", "cowplot", "sf", "ggspatial","stringr","sp", "rgdal",  "rgeos", "raster","readr" ,"tidyverse", "ggplot2", "lubridate",  "ggthemes", "data.table", "reshape2", "RColorBrewer", "marmap", "extrafont", "oce", "MODIS", "measurements")  # set packages here
packages<-c("sp", "rgdal",  "rgeos", "raster","readr" ,"tidyverse", "ggplot2", "lubridate",  "ggthemes", "HURDAT", "sf", "cmocean", "ncdf4", "plot3D", "tidync")
f.ipak(packages)
rm(f.ipak, packages)
knitr::opts_chunk$set(echo = FALSE)
x<-tidync(file.path(data_d, "odz_atlas/nc_depth.nc"))
x
quit()
