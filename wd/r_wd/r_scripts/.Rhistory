# limits = as.Date(c('1/1/2002', '6/1/2022'))
plot_g
txt<-fig4_txt
w<-inner_join(x,y, by='date') %>% inner_join(., z, by='date' ) %>% select(., - ef)
h_rect<-rects$h
t_rect<-rects$t
t_4_rect<-rects$t_4
stdp<-1013.25
ff<-1.74
adj<-stdp+ff*(stdp-min(h_rect$y2))
h_rect$y2<-abs(h_rect$y2-adj)
t_rect$y2<-abs(t_rect$y2-adj)
t_4_rect$y2<-abs(t_4_rect$y2-adj)
g.breaks<-c( 872, 900, 920, plyr::round_any((944+920)/2, 5, f=floor), plyr::round_any((964+945)/2, 5, f=ceiling), plyr::round_any((979+965)/2,5, f=floor), 980, 1000) %>% round(., 0) %>% append(., c(round(stdp,2),  round(adj,2)))
labs<-(g.breaks)
g.breaks<-abs(g.breaks-adj)
t_4_rect<-filter(t_4_rect, start >=date(min(w$date)))
t_rect<-filter(t_rect, start >=date(min(w$date)))
h_rect<-filter(h_rect, start >=date(min(w$date)))
scale.g<-(max(w$avg)/max(c(t_rect$y2, h_rect$y2, t_4_rect$y2)))
plot_g<-ggplot()+ theme_bw()+
geom_segment(data=t_4_rect, mapping=aes(x=start, xend=end, yend=y2*scale.g, y=-Inf), linetype ="dashed", color=rect_fill_outside, alpha=.5)+
geom_hline(yintercept=(mean(w$avg)), data=w, linetype="dashed", color ="black")+
geom_rect(data=t_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill_non, fill=rect_fill_non, alpha=.5)+
geom_rect(data=h_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill, fill=rect_fill, alpha=.5)+
# geom_point(data=w, aes(date, avg), color="black", lwd=.6)+
geom_line(data=w, aes(date, avg), color="black", lwd=0.4)+
scale_y_continuous(name =txt$ylab, sec.axis = sec_axis(~./scale.g, name=txt$ylab2,  breaks = g.breaks , labels= labs))+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top", limits = date(c("2002-01-01","2022-06-01")))+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-06-01')), date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
scale_x_date(limits = as.Date(c('2002-01-01', '2022-01-01')), date_breaks = "1 years", date_labels = "%Y", position = "top")+
theme(axis.title.x=element_blank(), plot.tag = element_text(face = "bold"))
#
#
# limits = as.Date(c('1/1/2002', '6/1/2022'))
plot_g
txt<-fig4_txt
w<-inner_join(x,y, by='date') %>% inner_join(., z, by='date' ) %>% select(., - ef)
h_rect<-rects$h
t_rect<-rects$t
t_4_rect<-rects$t_4
stdp<-1013.25
ff<-1.745
adj<-stdp+ff*(stdp-min(h_rect$y2))
h_rect$y2<-abs(h_rect$y2-adj)
t_rect$y2<-abs(t_rect$y2-adj)
t_4_rect$y2<-abs(t_4_rect$y2-adj)
g.breaks<-c( 872, 900, 920, plyr::round_any((944+920)/2, 5, f=floor), plyr::round_any((964+945)/2, 5, f=ceiling), plyr::round_any((979+965)/2,5, f=floor), 980, 1000) %>% round(., 0) %>% append(., c(round(stdp,2),  round(adj,2)))
labs<-(g.breaks)
g.breaks<-abs(g.breaks-adj)
t_4_rect<-filter(t_4_rect, start >=date(min(w$date)))
t_rect<-filter(t_rect, start >=date(min(w$date)))
h_rect<-filter(h_rect, start >=date(min(w$date)))
scale.g<-(max(w$avg)/max(c(t_rect$y2, h_rect$y2, t_4_rect$y2)))
plot_g<-ggplot()+ theme_bw()+
geom_segment(data=t_4_rect, mapping=aes(x=start, xend=end, yend=y2*scale.g, y=-Inf), linetype ="dashed", color=rect_fill_outside, alpha=.5)+
geom_hline(yintercept=(mean(w$avg)), data=w, linetype="dashed", color ="black")+
geom_rect(data=t_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill_non, fill=rect_fill_non, alpha=.5)+
geom_rect(data=h_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill, fill=rect_fill, alpha=.5)+
# geom_point(data=w, aes(date, avg), color="black", lwd=.6)+
geom_line(data=w, aes(date, avg), color="black", lwd=0.4)+
scale_y_continuous(name =txt$ylab, sec.axis = sec_axis(~./scale.g, name=txt$ylab2,  breaks = g.breaks , labels= labs))+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top", limits = date(c("2002-01-01","2022-06-01")))+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-06-01')), date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
scale_x_date(limits = as.Date(c('2002-01-01', '2022-01-01')), date_breaks = "1 years", date_labels = "%Y", position = "top")+
theme(axis.title.x=element_blank(), plot.tag = element_text(face = "bold"))
#
#
# limits = as.Date(c('1/1/2002', '6/1/2022'))
plot_g
txt<-fig4_txt
w<-inner_join(x,y, by='date') %>% inner_join(., z, by='date' ) %>% select(., - ef)
h_rect<-rects$h
t_rect<-rects$t
t_4_rect<-rects$t_4
stdp<-1013.25
ff<-1.745
adj<-stdp+ff*(stdp-min(h_rect$y2))
h_rect$y2<-abs(h_rect$y2-adj)
t_rect$y2<-abs(t_rect$y2-adj)
t_4_rect$y2<-abs(t_4_rect$y2-adj)
g.breaks<-c( 872, 900, 920, plyr::round_any((944+920)/2, 5, f=floor), plyr::round_any((964+945)/2, 5, f=ceiling), plyr::round_any((979+965)/2,5, f=floor), 980, 1000) %>% round(., 0) %>% append(., c(round(stdp,2),  round(adj,2)))
labs<-(g.breaks)
g.breaks<-abs(g.breaks-adj)
t_4_rect<-filter(t_4_rect, start >=date(min(w$date)))
t_rect<-filter(t_rect, start >=date(min(w$date)))
h_rect<-filter(h_rect, start >=date(min(w$date)))
scale.g<-(max(w$avg)/max(c(t_rect$y2, h_rect$y2, t_4_rect$y2)))
plot_g<-ggplot()+ theme_bw()+
geom_segment(data=t_4_rect, mapping=aes(x=start, xend=end, yend=y2*scale.g, y=-Inf), linetype ="dashed", color=rect_fill_outside, alpha=.5)+
geom_hline(yintercept=(mean(w$avg)), data=w, linetype="dashed", color ="black")+
geom_rect(data=t_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill_non, fill=rect_fill_non, alpha=.5)+
geom_rect(data=h_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill, fill=rect_fill, alpha=.5)+
# geom_point(data=w, aes(date, avg), color="black", lwd=.6)+
geom_line(data=w, aes(date, avg), color="black", lwd=0.4)+
scale_y_continuous(name =txt$ylab, sec.axis = sec_axis(~./scale.g, name=txt$ylab2,  breaks = g.breaks , labels= labs))+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top", limits = date(c("2002-01-01","2022-06-01")))+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-06-01')), date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-01-01')), date_breaks = "1 years", date_labels = "%Y", position = "top")+
scale_x_date(limits = as.Date(c('2002-01-01', '2022-01-01')), date_breaks = "1 years", date_labels = "%Y", position = "top", expand = c(0, 0))+
theme(axis.title.x=element_blank(), plot.tag = element_text(face = "bold"))
# expand = c(0, 0))
#
# limits = as.Date(c('1/1/2002', '6/1/2022'))
plot_g
txt<-fig4_txt
w<-inner_join(x,y, by='date') %>% inner_join(., z, by='date' ) %>% select(., - ef)
h_rect<-rects$h
t_rect<-rects$t
t_4_rect<-rects$t_4
stdp<-1013.25
ff<-1.745
adj<-stdp+ff*(stdp-min(h_rect$y2))
h_rect$y2<-abs(h_rect$y2-adj)
t_rect$y2<-abs(t_rect$y2-adj)
t_4_rect$y2<-abs(t_4_rect$y2-adj)
g.breaks<-c( 872, 900, 920, plyr::round_any((944+920)/2, 5, f=floor), plyr::round_any((964+945)/2, 5, f=ceiling), plyr::round_any((979+965)/2,5, f=floor), 980, 1000) %>% round(., 0) %>% append(., c(round(stdp,2),  round(adj,2)))
labs<-(g.breaks)
g.breaks<-abs(g.breaks-adj)
t_4_rect<-filter(t_4_rect, start >=date(min(w$date)))
t_rect<-filter(t_rect, start >=date(min(w$date)))
h_rect<-filter(h_rect, start >=date(min(w$date)))
scale.g<-(max(w$avg)/max(c(t_rect$y2, h_rect$y2, t_4_rect$y2)))
plot_g<-ggplot()+ theme_bw()+
geom_segment(data=t_4_rect, mapping=aes(x=start, xend=end, yend=y2*scale.g, y=-Inf), linetype ="dashed", color=rect_fill_outside, alpha=.5)+
geom_hline(yintercept=(mean(w$avg)), data=w, linetype="dashed", color ="black")+
geom_rect(data=t_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill_non, fill=rect_fill_non, alpha=.5)+
geom_rect(data=h_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill, fill=rect_fill, alpha=.5)+
# geom_point(data=w, aes(date, avg), color="black", lwd=.6)+
geom_line(data=w, aes(date, avg), color="black", lwd=0.4)+
scale_y_continuous(name =txt$ylab, sec.axis = sec_axis(~./scale.g, name=txt$ylab2,  breaks = g.breaks , labels= labs))+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top", limits = date(c("2002-01-01","2022-06-01")))+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-06-01')), date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-01-01')), date_breaks = "1 years", date_labels = "%Y", position = "top")+
scale_x_date(limits = as.Date(c('2002-03-01', '2022-01-15')), date_breaks = "1 years", date_labels = "%Y", position = "top", expand = c(0, 0))+
theme(axis.title.x=element_blank(), plot.tag = element_text(face = "bold"))
# expand = c(0, 0))
#
# limits = as.Date(c('1/1/2002', '6/1/2022'))
plot_g
txt<-fig4_txt
w<-inner_join(x,y, by='date') %>% inner_join(., z, by='date' ) %>% select(., - ef)
h_rect<-rects$h
t_rect<-rects$t
t_4_rect<-rects$t_4
stdp<-1013.25
ff<-1.745
adj<-stdp+ff*(stdp-min(h_rect$y2))
h_rect$y2<-abs(h_rect$y2-adj)
t_rect$y2<-abs(t_rect$y2-adj)
t_4_rect$y2<-abs(t_4_rect$y2-adj)
g.breaks<-c( 872, 900, 920, plyr::round_any((944+920)/2, 5, f=floor), plyr::round_any((964+945)/2, 5, f=ceiling), plyr::round_any((979+965)/2,5, f=floor), 980, 1000) %>% round(., 0) %>% append(., c(round(stdp,2),  round(adj,2)))
labs<-(g.breaks)
g.breaks<-abs(g.breaks-adj)
t_4_rect<-filter(t_4_rect, start >=date(min(w$date)))
t_rect<-filter(t_rect, start >=date(min(w$date)))
h_rect<-filter(h_rect, start >=date(min(w$date)))
scale.g<-(max(w$avg)/max(c(t_rect$y2, h_rect$y2, t_4_rect$y2)))
plot_g<-ggplot()+ theme_bw()+
geom_segment(data=t_4_rect, mapping=aes(x=start, xend=end, yend=y2*scale.g, y=-Inf), linetype ="dashed", color=rect_fill_outside, alpha=.5)+
geom_hline(yintercept=(mean(w$avg)), data=w, linetype="dashed", color ="black")+
geom_rect(data=t_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill_non, fill=rect_fill_non, alpha=.5)+
geom_rect(data=h_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill, fill=rect_fill, alpha=.5)+
# geom_point(data=w, aes(date, avg), color="black", lwd=.6)+
geom_line(data=w, aes(date, avg), color="black", lwd=0.4)+
scale_y_continuous(name =txt$ylab, sec.axis = sec_axis(~./scale.g, name=txt$ylab2,  breaks = g.breaks , labels= labs))+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top", limits = date(c("2002-01-01","2022-06-01")))+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-06-01')), date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-01-01')), date_breaks = "1 years", date_labels = "%Y", position = "top")+
scale_x_date(limits = as.Date(c('2002-05-01', '2022-01-15')), date_breaks = "1 years", date_labels = "%Y", position = "top", expand = c(0, 0))+
theme(axis.title.x=element_blank(), plot.tag = element_text(face = "bold"))
# expand = c(0, 0))
#
# limits = as.Date(c('1/1/2002', '6/1/2022'))
plot_g
txt<-fig4_txt
w<-inner_join(x,y, by='date') %>% inner_join(., z, by='date' ) %>% select(., - ef)
h_rect<-rects$h
t_rect<-rects$t
t_4_rect<-rects$t_4
stdp<-1013.25
ff<-1.745
adj<-stdp+ff*(stdp-min(h_rect$y2))
h_rect$y2<-abs(h_rect$y2-adj)
t_rect$y2<-abs(t_rect$y2-adj)
t_4_rect$y2<-abs(t_4_rect$y2-adj)
g.breaks<-c( 872, 900, 920, plyr::round_any((944+920)/2, 5, f=floor), plyr::round_any((964+945)/2, 5, f=ceiling), plyr::round_any((979+965)/2,5, f=floor), 980, 1000) %>% round(., 0) %>% append(., c(round(stdp,2),  round(adj,2)))
labs<-(g.breaks)
g.breaks<-abs(g.breaks-adj)
t_4_rect<-filter(t_4_rect, start >=date(min(w$date)))
t_rect<-filter(t_rect, start >=date(min(w$date)))
h_rect<-filter(h_rect, start >=date(min(w$date)))
scale.g<-(max(w$avg)/max(c(t_rect$y2, h_rect$y2, t_4_rect$y2)))
plot_g<-ggplot()+ theme_bw()+
geom_segment(data=t_4_rect, mapping=aes(x=start, xend=end, yend=y2*scale.g, y=-Inf), linetype ="dashed", color=rect_fill_outside, alpha=.5)+
geom_hline(yintercept=(mean(w$avg)), data=w, linetype="dashed", color ="black")+
geom_rect(data=t_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill_non, fill=rect_fill_non, alpha=.5)+
geom_rect(data=h_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill, fill=rect_fill, alpha=.5)+
# geom_point(data=w, aes(date, avg), color="black", lwd=.6)+
geom_line(data=w, aes(date, avg), color="black", lwd=0.4)+
scale_y_continuous(name =txt$ylab, sec.axis = sec_axis(~./scale.g, name=txt$ylab2,  breaks = g.breaks , labels= labs))+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top", limits = date(c("2002-01-01","2022-06-01")))+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-06-01')), date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-01-01')), date_breaks = "1 years", date_labels = "%Y", position = "top")+
scale_x_date(limits = as.Date(c('2002-05-01', '2022-02-01')), date_breaks = "1 years", date_labels = "%Y", position = "top", expand = c(0, 0))+
theme(axis.title.x=element_blank(), plot.tag = element_text(face = "bold"))
# expand = c(0, 0))
#
# limits = as.Date(c('1/1/2002', '6/1/2022'))
plot_g
txt<-fig4_txt
w<-inner_join(x,y, by='date') %>% inner_join(., z, by='date' ) %>% select(., - ef)
h_rect<-rects$h
t_rect<-rects$t
t_4_rect<-rects$t_4
stdp<-1013.25
ff<-1.745
adj<-stdp+ff*(stdp-min(h_rect$y2))
h_rect$y2<-abs(h_rect$y2-adj)
t_rect$y2<-abs(t_rect$y2-adj)
t_4_rect$y2<-abs(t_4_rect$y2-adj)
g.breaks<-c( 872, 900, 920, plyr::round_any((944+920)/2, 5, f=floor), plyr::round_any((964+945)/2, 5, f=ceiling), plyr::round_any((979+965)/2,5, f=floor), 980, 1000) %>% round(., 0) %>% append(., c(round(stdp,2),  round(adj,2)))
labs<-(g.breaks)
g.breaks<-abs(g.breaks-adj)
t_4_rect<-filter(t_4_rect, start >=date(min(w$date)))
t_rect<-filter(t_rect, start >=date(min(w$date)))
h_rect<-filter(h_rect, start >=date(min(w$date)))
scale.g<-(max(w$avg)/max(c(t_rect$y2, h_rect$y2, t_4_rect$y2)))
plot_g<-ggplot()+ theme_bw()+
geom_segment(data=t_4_rect, mapping=aes(x=start, xend=end, yend=y2*scale.g, y=-Inf), linetype ="dashed", color=rect_fill_outside, alpha=.5)+
geom_hline(yintercept=(mean(w$avg)), data=w, linetype="dashed", color ="black")+
geom_rect(data=t_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill_non, fill=rect_fill_non, alpha=.5)+
geom_rect(data=h_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill, fill=rect_fill, alpha=.5)+
geom_point(data=w, aes(date, avg), color="black", lwd=.6)+
# geom_line(data=w, aes(date, avg), color="black", lwd=0.4)+
scale_y_continuous(name =txt$ylab, sec.axis = sec_axis(~./scale.g, name=txt$ylab2,  breaks = g.breaks , labels= labs))+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top", limits = date(c("2002-01-01","2022-06-01")))+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-06-01')), date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-01-01')), date_breaks = "1 years", date_labels = "%Y", position = "top")+
scale_x_date(limits = as.Date(c('2002-05-01', '2022-02-01')), date_breaks = "1 years", date_labels = "%Y", position = "top", expand = c(0, 0))+
theme(axis.title.x=element_blank(), plot.tag = element_text(face = "bold"))
# expand = c(0, 0))
#
# limits = as.Date(c('1/1/2002', '6/1/2022'))
plot_g
txt<-fig4_txt
w<-inner_join(x,y, by='date') %>% inner_join(., z, by='date' ) %>% select(., - ef)
h_rect<-rects$h
t_rect<-rects$t
t_4_rect<-rects$t_4
stdp<-1013.25
ff<-1.745
adj<-stdp+ff*(stdp-min(h_rect$y2))
h_rect$y2<-abs(h_rect$y2-adj)
t_rect$y2<-abs(t_rect$y2-adj)
t_4_rect$y2<-abs(t_4_rect$y2-adj)
g.breaks<-c( 872, 900, 920, plyr::round_any((944+920)/2, 5, f=floor), plyr::round_any((964+945)/2, 5, f=ceiling), plyr::round_any((979+965)/2,5, f=floor), 980, 1000) %>% round(., 0) %>% append(., c(round(stdp,2),  round(adj,2)))
labs<-(g.breaks)
g.breaks<-abs(g.breaks-adj)
t_4_rect<-filter(t_4_rect, start >=date(min(w$date)))
t_rect<-filter(t_rect, start >=date(min(w$date)))
h_rect<-filter(h_rect, start >=date(min(w$date)))
scale.g<-(max(w$avg)/max(c(t_rect$y2, h_rect$y2, t_4_rect$y2)))
plot_g<-ggplot()+ theme_bw()+
geom_segment(data=t_4_rect, mapping=aes(x=start, xend=end, yend=y2*scale.g, y=-Inf), linetype ="dashed", color=rect_fill_outside, alpha=.5)+
geom_hline(yintercept=(mean(w$avg)), data=w, linetype="dashed", color ="black")+
geom_rect(data=t_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill_non, fill=rect_fill_non, alpha=.5)+
geom_rect(data=h_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill, fill=rect_fill, alpha=.5)+
geom_point(data=w, aes(date, avg), color="black", lwd=.6)+
geom_line(data=w, aes(date, avg), color="black", lwd=0.4)+
scale_y_continuous(name =txt$ylab, sec.axis = sec_axis(~./scale.g, name=txt$ylab2,  breaks = g.breaks , labels= labs))+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top", limits = date(c("2002-01-01","2022-06-01")))+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-06-01')), date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-01-01')), date_breaks = "1 years", date_labels = "%Y", position = "top")+
scale_x_date(limits = as.Date(c('2002-05-01', '2022-02-01')), date_breaks = "1 years", date_labels = "%Y", position = "top", expand = c(0, 0))+
theme(axis.title.x=element_blank(), plot.tag = element_text(face = "bold"))
# expand = c(0, 0))
#
# limits = as.Date(c('1/1/2002', '6/1/2022'))
plot_g
dev.off()
number_h_ratio<-33/7
setwd(wd)
setwd(fig)
pdf("figure_4_v1.pdf", height=number_h_ratio , width =14)
plot_g
dev.off()
txt<-fig4_txt
w<-inner_join(x,y, by='date') %>% inner_join(., z, by='date' ) %>% select(., - ef)
h_rect<-rects$h
t_rect<-rects$t
t_4_rect<-rects$t_4
stdp<-1013.25
ff<-1.745
adj<-stdp+ff*(stdp-min(h_rect$y2))
h_rect$y2<-abs(h_rect$y2-adj)
t_rect$y2<-abs(t_rect$y2-adj)
t_4_rect$y2<-abs(t_4_rect$y2-adj)
g.breaks<-c( 872, 900, 920, plyr::round_any((944+920)/2, 5, f=floor), plyr::round_any((964+945)/2, 5, f=ceiling), plyr::round_any((979+965)/2,5, f=floor), 980, 1000) %>% round(., 0) %>% append(., c(round(stdp,2),  round(adj,2)))
labs<-(g.breaks)
g.breaks<-abs(g.breaks-adj)
t_4_rect<-filter(t_4_rect, start >=date(min(w$date)))
t_rect<-filter(t_rect, start >=date(min(w$date)))
h_rect<-filter(h_rect, start >=date(min(w$date)))
scale.g<-(max(w$avg)/max(c(t_rect$y2, h_rect$y2, t_4_rect$y2)))
plot_v2<-ggplot()+ theme_bw()+
# geom_segment(data=t_4_rect, mapping=aes(x=start, xend=end, yend=y2*scale.g, y=-Inf), linetype ="dashed", color=rect_fill_outside, alpha=.5)+
geom_hline(yintercept=(mean(w$avg)), data=w, linetype="dashed", color ="black")+
geom_rect(data=t_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill_non, fill=rect_fill_non, alpha=.5)+
geom_rect(data=h_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill, fill=rect_fill, alpha=.5)+
geom_point(data=w, aes(date, avg), color="black", lwd=.6)+
geom_line(data=w, aes(date, avg), color="black", lwd=0.4)+
scale_y_continuous(name =txt$ylab, sec.axis = sec_axis(~./scale.g, name=txt$ylab2,  breaks = g.breaks , labels= labs))+
scale_x_date(limits = as.Date(c('2002-05-01', '2022-02-01')), date_breaks = "1 years", date_labels = "%Y", position = "top", expand = c(0, 0))+
theme(axis.title.x=element_blank(), plot.tag = element_text(face = "bold"))
# expand = c(0, 0))
#
# limits = as.Date(c('1/1/2002', '6/1/2022'))
plot_v2
dev.off()
number_h_ratio<-33/7
setwd(wd)
setwd(fig)
pdf("figure_four_v2.pdf", height=number_h_ratio , width =14)
plot_v2
dev.off()
rm(list=ls())
# relative directories
robj<-"r_objects"
# fig<-"../../figures"
# gis_data<-"../../data/gis_data"
# data_d<-"../../data/2018_data"
data_d<-"../../data"
# ocean_color<-"../../data/ocean_color_bud"
# bathy_d<-"../../data/bathy" # edit this
output<-"../../output"
knitr::opts_chunk$set(echo =FALSE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
# packages<-c("stars", "gridExtra", "cowplot", "sf", "ggspatial","stringr","sp", "rgdal",  "rgeos", "raster","readr" ,"tidyverse", "ggplot2", "lubridate",  "ggthemes", "data.table", "reshape2", "RColorBrewer", "marmap", "extrafont", "oce", "MODIS", "measurements")  # set packages here
# tidyverse: is all of the following packages: ggplot2, dplyr, tidyr, readr, purr, tibble, sringr, & forcats.
packages<-c("sp", "rgdal",  "rgeos", "raster", "readr", "tidyverse", "lubridate",  "ggthemes",  "sf", "cmocean", "ncdf4", "RNetCDF",  "plot3D", "tidync", "devtools", "stars", "ncmeta", "maps", "oce", "data.table", "fasterize", "RStoolbox", "scales", "purrr", "nngeo")
# "HURDAT",
f.ipak(packages)
# lapply(packages, require, character.only = TRUE)
# rm(f.ipak, packages)
print(paste0("Current Working Directory is ", getwd()))
wd<-getwd()
setwd(robj)
# bud_match<-readRDS("bud_match.R")
# match<-readRDS("match.R")
load("20220201_temp_workspace.RData")
# rm(function_variables, m.coast)
# save(function_variables, m.coast, database,  file="20220207_temp_workspace.RData")
# saveRDS(match, "match.R")
# saveRDS(bud_match, "bud_match.R")
file<-(file.path(data_d, "odz_atlas/nc_depth_DIVA.nc"))
# q<-c("maxFODZ", "topDepth", "thickness", "botDepth")
q<-c("topDepth")
diva_depth.odz<-tidync(file)%>% activate(c("D0,D1")) %>% hyper_tibble(select_var =q)
quit
quit()
rm(list=ls())
# relative directories
robj<-"r_objects"
fig<-"../../figures"
gis_data<-"../../data/gis_data"
output<-"../../output"
knitr::opts_chunk$set(echo =FALSE, warning = FALSE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
wd<-getwd()
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
# packages<-c("stars", "gridExtra", "cowplot", "sf", "ggspatial","stringr","sp", "rgdal",  "rgeos", "raster","readr" ,"tidyverse", "ggplot2", "lubridate",  "ggthemes", "data.table", "reshape2", "RColorBrewer", "marmap", "extrafont", "oce", "MODIS", "measurements")  # set packages here
# tidyverse: is all of the following packages: ggplot2, dplyr, tidyr, readr, purr, tibble, sringr, & forcats.
packages<-c("sp", "rgdal",  "rgeos", "raster", "readr", "tidyverse", "lubridate",  "ggthemes",  "sf", "cmocean", "ncdf4", "RNetCDF",  "plot3D", "tidync", "devtools", "stars", "ncmeta", "maps", "oce", "data.table", "fasterize", "RStoolbox", "scales", "purrr", "HURDAT", "ggpattern")
# "HURDAT",
f.ipak(packages)
# lapply(packages, require, character.only = TRUE)
# rm(f.ipak, packages)
print(paste0("Current Working Directory is ", getwd()))
setwd(wd)
setwd(robj)
# h<-get_hurdat(basin="EP")
# saveRDS(h, "hurdat.R")
h<-readRDS("hurdat.R")
h$DateTime<-with_tz(h$DateTime, tz="UTC")
setwd(wd)
setwd(robj)
stations_positions_list<-readRDS("OC1806A_stations_positions_list.R")
st<-stations_positions_list[[3]][4,cbind(2,3)]
st<-sf::st_as_sf(st, coords =c("longitude", "latitude"),  crs = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
flat<-sf::st_transform(st, "+proj=aeqd +lat_0=18.5005 +lon_0=-108.502" )
## radius in km for POC select
radii<-100000
circle_3.5_200km<-sf::st_buffer(flat, dist=radii)%>%sf::st_transform(., "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
## for selecting TC that intersect
radii<-2*radii
circle_3.5_400km<-sf::st_buffer(flat, dist=radii)%>%sf::st_transform(., "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
rm(flat, radii, st, stations_positions_list)
rm(list=ls())
# wd<-"/home/brandon/vestawd/omz/wd/r_wd/r_scripts"
# wd<-"/home/brandon/europawd/omz/wd/r_wd/"
wd<-"/home/brandon/callistowd/omz/wd/r_wd"
robj<-"r_objects"
setwd(wd)
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
packages<-c("sp", "rgdal",  "rgeos", "raster", "readr", "tidyverse", "lubridate",  "ggthemes",  "sf", "cmocean", "ncdf4", "RNetCDF",  "plot3D", "tidync", "devtools", "stars", "ncmeta", "maps", "oce",
"data.table","raster", "fasterize", "RStoolbox", "scales", "purrr", "marmap", "gsw", "R.utils","Matrix")
f.ipak(packages)
setwd(wd)
path_code = "r_scripts/submodules/BGC-ARGO_R_WORKSHOP/"
source(paste0(path_code, "initialize_argo.R"))
source(paste0(path_code, "try_download.R"))
source(paste0(path_code, "do_download.R"))
source(paste0(path_code, "download_float.R"))
source(paste0(path_code, "download_multi_floats.R"))
source(paste0(path_code, "check_dir.R"))
source(paste0(path_code, "get_var_name_units.R"))
source(paste0(path_code, "select_profiles.R"))
source(paste0(path_code, "load_float_data.R"))
source(paste0(path_code, "plot_trajectories.R"))
source(paste0(path_code, "get_lon_lat_lims.R"))
source(paste0(path_code, "show_trajectories.R"))
source(paste0(path_code, "do_pause.R"))
rm(list=ls())
wd<-"/home/brandon/vestawd/omz/wd/r_wd/r_scripts"
robj<-"r_objects"
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
packages<-c("sp", "rgdal",  "rgeos", "raster", "readr", "tidyverse", "lubridate",  "ggthemes",  "sf", "cmocean", "ncdf4", "RNetCDF",  "plot3D", "tidync", "devtools", "stars", "ncmeta", "maps", "oce",
"data.table","raster", "fasterize", "RStoolbox", "scales", "purrr", "marmap", "gsw", "R.utils","Matrix")
f.ipak(packages)
setwd(wd)
path_code = "r_scripts/submodules/BGC-ARGO_R_WORKSHOP/"
source(paste0(path_code, "initialize_argo.R"))
source(paste0(path_code, "try_download.R"))
source(paste0(path_code, "do_download.R"))
source(paste0(path_code, "download_float.R"))
source(paste0(path_code, "download_multi_floats.R"))
source(paste0(path_code, "check_dir.R"))
source(paste0(path_code, "get_var_name_units.R"))
source(paste0(path_code, "select_profiles.R"))
source(paste0(path_code, "load_float_data.R"))
source(paste0(path_code, "plot_trajectories.R"))
source(paste0(path_code, "get_lon_lat_lims.R"))
source(paste0(path_code, "show_trajectories.R"))
source(paste0(path_code, "do_pause.R"))
source(paste0(path_code, "depth_interp.R"))
source(paste0(path_code, "calc_auxil.R"))
source(paste0(path_code, "get_multi_profile_mean.R"))
source(paste0(path_code, "show_profiles.R"))
source(paste0(path_code, "plot_profiles.R"))
source(paste0(path_code, "show_sections.R"))
source(paste0(path_code, "plot_sections.R"))
source(paste0(path_code, "plot_profiles.R"))
rm(f.ipak, packages, path_code)
setwd(robj)
stations_mapped<-readRDS("OC1806A_mapped_ctd_stations.R")
e<-extent(stations_mapped)
rm(list=ls())
wd<-"/home/brandon/vestawd/omz/wd/r_wd/r_scripts"
robj<-"r_objects"
setwd(wd)
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
packages<-c("sp", "rgdal",  "rgeos", "raster", "readr", "tidyverse", "lubridate",  "ggthemes",  "sf", "cmocean", "ncdf4", "RNetCDF",  "plot3D", "tidync", "devtools", "stars", "ncmeta", "maps", "oce",
"data.table","raster", "fasterize", "RStoolbox", "scales", "purrr", "marmap", "gsw", "R.utils","Matrix")
f.ipak(packages)
setwd(wd)
path_code = "r_scripts/submodules/BGC-ARGO_R_WORKSHOP/"
source(paste0(path_code, "initialize_argo.R"))
