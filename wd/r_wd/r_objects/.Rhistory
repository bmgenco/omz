x<-as_tibble(x)
names(x)<-c("date", "time", "chlorophyll")
return(x)
}
f.rearrange_wind<-function(x){
#names(x)<-c.names
options("digits.secs"=3)
x$time<-mdy_hms(paste(x$V1, x$V2, tz="UTC"))
x$time<-with_tz(x$time, tz="US/Mountain")
x$date<-date(x$time)
#x<-subset(x, select=c(date, time, V3, V4, V5, V6, V7,V8,V9,V10))
x<-subset(x, select=c(date, time, V5))
x<-as_tibble(x)
return(x)
}
#### gps functions ####
f.rearrange_gps<-function(x, c.names){
x<-x[,c(1,2,5,7)]
names(x)<-c.names
options("digits.secs"=3)
x$time<-mdy_hms(paste(x$date1, x$time1, tz="UTC"))
x$time<-with_tz(x$time, tz="US/Mountain")
x$date<-date(x$time)
x<-subset(x, select= c(date, time, lat, lon))
x<-as_tibble(x)
names(x)<-c("date", "time", "lat", "lon")
return(x)
} # requires env variable "c.names"
f.gps_lat<-function(data){
x<-data$lat
x<-format(round(x, digits=5), nsmall = 5)
x<-as.character(x)
p<-"(([0-9]{2})(?=\\.))"
r<-" \\1"
x<-str_replace_all(pattern=p, replacement = r, x)
x<-measurements::conv_unit(x, from='deg_dec_min', to ="dec_deg")
x<-as.numeric(x)
x<-format(round(x, digits=4), nsmall = 4)
data$lat<<-x
}
f.gps_lon<-function(data){
x<-data$lon
x<-format(round(x, digits=5), nsmall = 5)
x<-as.character(x)
p<-"(([0-9]{2})(?=\\.))"
r<-" \\1"
x<-str_replace_all(pattern=p, replacement = r, x)
x<-measurements::conv_unit(x, from='deg_dec_min', to ="dec_deg")
x<-as.numeric(x)
x<-format(round(x, digits=4), nsmall = 4)
data$lon<<-x
}
#### combination functions ####
f.time_join_flow<-function(f, t){
#for joining data by "nearest" time/date in seconds
#requires "data.table" package
setDT(f)
setDT(t)
setkey(f, time)
setkey(t, time)
f<-f[t, roll='nearest']
} #for spatial stations from flowthrough
f.time_join2_flow<-function(data, pos){
setDT(data)
setDT(pos)
setkey(data, time)
setkey(pos, time)
data<-data[pos, roll='nearest']
}
#### ctd functions ####
f.time_ctd<-function(x){
x$time<-with_tz(x$time, tz="US/Mountain")
return(x)} #for spatial stations from CTD centroids
f.cent_ctd<-function(x){
y<-SpatialPoints(coords=cbind(x$longitude, x$latitude), proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
x<-gCentroid(y)
x<-cbind(x@coords[1], x@coords[2])
return(x)} #for spatial stations from CTD centroids
f.mean_time_ctd<-function(x){
x<-with_tz(x$time, tzone="UTC")%>%as.numeric%>%mean
x<-with_tz(with_tz(as_datetime(x), tzone="UTC"), tzone="US/Mountain")
return(x)}  #for spatial stations from CTD centroids
# f.read_ctd<-function(ctdata){
#   files<-list.files(ctdata)
#   data<-vector(mode="list", length=length(files))
#
#   for(i in 1:length(files)){
#     # add if else statement
#     data[[i]]<-read.ctd(file.path(ctdata, files[]),)
#    # trim downcast
#     x<-ctdTrim(x, method = "downcast")
#     }
#
#
# return(data)} #for CTD data not used
# remote sensing functions
## Load data
setwd(robj)
pos<-readRDS("OC1806A_gps.R")
#f<-readRDS("OC1806A_fluorometer_raw.R") # old uncorrected data
f<-readRDS("OC1806A_fluorometer_corrected.R")
t<-readRDS("OC1806A_temperature_raw.R")
w<-readRDS("OC1806A_wind_raw.R")
setwd(robj)
list.files()
pos<-readRDS("OC1806A_gps.R")
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
packages<-c("stars", "gridExtra", "cowplot", "sf", "ggspatial","stringr","sp", "rgdal",  "rgeos", "raster","readr" ,"tidyverse", "ggplot2", "lubridate",  "ggthemes", "data.table", "reshape2", "RColorBrewer", "marmap", "extrafont", "oce", "MODIS")  # set packages here
f.ipak(packages)
rm(f.ipak, packages)
rm(list=ls())
knitr::opts_chunk$set(echo = TRUE)
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
packages<-c("stars", "gridExtra", "cowplot", "sf", "ggspatial","stringr","sp", "rgdal",  "rgeos", "raster","readr" ,"tidyverse", "ggplot2", "lubridate",  "ggthemes", "data.table", "reshape2", "RColorBrewer", "marmap", "extrafont", "oce", "MODIS")  # set packages here
f.ipak(packages)
rm(f.ipak, packages)
wd<-"/home/brandon/vestawd/omz/r_wd"
robj<-"/home/brandon/vestawd/omz/r_wd/r_objects"
# fig<-"/home/brandon/vestawd/omz/r_wd/figures"
gis_data<-"/home/brandon/vestawd/omz/gis_data"
data_d<-"/home/brandon/vestawd/omz/2018_data"
# lyx_fig<-"/home/brandon/vestawd/omz/r_wd/lyx_figures"
ctdata<-"/home/brandon/vestawd/omz/2018_data/ctd/data"
fdata<-"/home/brandon/vestawd/omz/2018_data/fluor/get.rvdata.us/cruise/OC1806A/fileset/129998/OC1806A/129998/data" # Cruise flow fluorometer
tdata<-"/home/brandon/vestawd/omz/2018_data/temp/OC1806A/130001/data" # Cruise flow Temp
wdata<-"/home/brandon/vestawd/omz/2018_data/anem/OC1806A/130002/data" # Cruise wind/anemometer
gps_data<-"/home/brandon/vestawd/omz/2018_data/gnss/data" # Cruise gps raw
corrected_fdata<-"/home/brandon/vestawd/omz/2018_data/fluor/corrected_fluorometer/FLOW_THROUGH-20210511T213127Z-001/FLOW_THROUGH/CHL"
knitr::opts_knit$set(root.dir=wd)
#### fluorometer functions ####
f.read_cruise<-function(directory){
files<-list.files(directory)
data<-vector(mode="list", length=length(files))
for(i in 1:length(files)){
data[[i]]<-read.delim(file.path(directory, files[i]), sep =",", header = F)
}
return(data)}
f.rearrange_temp<-function(x, c.names){
names(x)<-c.names
options("digits.secs"=3)
x$time<-mdy_hms(paste(x$`SCS UTC DATE`, x$`SCS UTC TIME`, tz="UTC"))
x$time<-with_tz(x$time, tz="US/Mountain")
x$date<-date(x$time)
x<-subset(x, select= c(date, time, `TEMPERATURE CELSIUS`))
x<-as_tibble(x)
names(x)<-c("date", "time", "celsius")
return(x)
}
f.rearrange_flr<-function(x, c.names){
names(x)<-c.names
options("digits.secs"=3)
x$time<-mdy_hms(paste(x$`SCS UTC DATE`, x$`SCS UTC TIME`, tz="UTC"))
x$time<-with_tz(x$time, tz="US/Mountain")
x$date<-date(x$time)
x<-subset(x, select= c(date, time,  `TRANSMISSOMETER RAW VOLTAGE`, `FLOUROMETER RAW VOLTAGE`, `SURFACE PAR RAW VOLTAGE`))
x<-as_tibble(x)
names(x)<-c("date", "time", "transmissometer", "fluorometer","PAR")
return(x)
}
f.rearrange_flr_corrected<-function(x){
options("digits.secs"=3)
x$time<-mdy_hms(paste(x[,1], x[,2], tz="UTC"))
x$time<-with_tz(x$time, tz="US/Mountain")
x$date<-date(x$time)
x<-subset(x, select= c(date, time,  V4))
x<-as_tibble(x)
names(x)<-c("date", "time", "chlorophyll")
return(x)
}
f.rearrange_wind<-function(x){
#names(x)<-c.names
options("digits.secs"=3)
x$time<-mdy_hms(paste(x$V1, x$V2, tz="UTC"))
x$time<-with_tz(x$time, tz="US/Mountain")
x$date<-date(x$time)
#x<-subset(x, select=c(date, time, V3, V4, V5, V6, V7,V8,V9,V10))
x<-subset(x, select=c(date, time, V5))
x<-as_tibble(x)
return(x)
}
#### gps functions ####
f.rearrange_gps<-function(x, c.names){
x<-x[,c(1,2,5,7)]
names(x)<-c.names
options("digits.secs"=3)
x$time<-mdy_hms(paste(x$date1, x$time1, tz="UTC"))
x$time<-with_tz(x$time, tz="US/Mountain")
x$date<-date(x$time)
x<-subset(x, select= c(date, time, lat, lon))
x<-as_tibble(x)
names(x)<-c("date", "time", "lat", "lon")
return(x)
} # requires env variable "c.names"
f.gps_lat<-function(data){
x<-data$lat
x<-format(round(x, digits=5), nsmall = 5)
x<-as.character(x)
p<-"(([0-9]{2})(?=\\.))"
r<-" \\1"
x<-str_replace_all(pattern=p, replacement = r, x)
x<-measurements::conv_unit(x, from='deg_dec_min', to ="dec_deg")
x<-as.numeric(x)
x<-format(round(x, digits=4), nsmall = 4)
data$lat<<-x
}
f.gps_lon<-function(data){
x<-data$lon
x<-format(round(x, digits=5), nsmall = 5)
x<-as.character(x)
p<-"(([0-9]{2})(?=\\.))"
r<-" \\1"
x<-str_replace_all(pattern=p, replacement = r, x)
x<-measurements::conv_unit(x, from='deg_dec_min', to ="dec_deg")
x<-as.numeric(x)
x<-format(round(x, digits=4), nsmall = 4)
data$lon<<-x
}
#### combination functions ####
f.time_join_flow<-function(f, t){
#for joining data by "nearest" time/date in seconds
#requires "data.table" package
setDT(f)
setDT(t)
setkey(f, time)
setkey(t, time)
f<-f[t, roll='nearest']
} #for spatial stations from flowthrough
f.time_join2_flow<-function(data, pos){
setDT(data)
setDT(pos)
setkey(data, time)
setkey(pos, time)
data<-data[pos, roll='nearest']
}
#### ctd functions ####
f.time_ctd<-function(x){
x$time<-with_tz(x$time, tz="US/Mountain")
return(x)} #for spatial stations from CTD centroids
f.cent_ctd<-function(x){
y<-SpatialPoints(coords=cbind(x$longitude, x$latitude), proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
x<-gCentroid(y)
x<-cbind(x@coords[1], x@coords[2])
return(x)} #for spatial stations from CTD centroids
f.mean_time_ctd<-function(x){
x<-with_tz(x$time, tzone="UTC")%>%as.numeric%>%mean
x<-with_tz(with_tz(as_datetime(x), tzone="UTC"), tzone="US/Mountain")
return(x)}  #for spatial stations from CTD centroids
# f.read_ctd<-function(ctdata){
#   files<-list.files(ctdata)
#   data<-vector(mode="list", length=length(files))
#
#   for(i in 1:length(files)){
#     # add if else statement
#     data[[i]]<-read.ctd(file.path(ctdata, files[]),)
#    # trim downcast
#     x<-ctdTrim(x, method = "downcast")
#     }
#
#
# return(data)} #for CTD data not used
# remote sensing functions
setwd(robj)
## Load data
setwd(robj)
pos<-readRDS("OC1806A_gps.R")
rm(list=ls())
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
packages<-c("stars", "gridExtra", "cowplot", "sf", "ggspatial","stringr","sp", "rgdal",  "rgeos", "raster","readr" ,"tidyverse", "ggplot2", "lubridate",  "ggthemes", "data.table", "reshape2", "RColorBrewer", "marmap", "extrafont", "oce", "MODIS")  # set packages here
f.ipak(packages)
rm(f.ipak, packages)
wd<-"/home/brandon/vestawd/omz/r_wd"
robj<-"/home/brandon/vestawd/omz/r_wd/r_objects"
# fig<-"/home/brandon/vestawd/omz/r_wd/figures"
gis_data<-"/home/brandon/vestawd/omz/gis_data"
data_d<-"/home/brandon/vestawd/omz/2018_data"
# lyx_fig<-"/home/brandon/vestawd/omz/r_wd/lyx_figures"
ctdata<-"/home/brandon/vestawd/omz/2018_data/ctd/data"
fdata<-"/home/brandon/vestawd/omz/2018_data/fluor/get.rvdata.us/cruise/OC1806A/fileset/129998/OC1806A/129998/data" # Cruise flow fluorometer
tdata<-"/home/brandon/vestawd/omz/2018_data/temp/OC1806A/130001/data" # Cruise flow Temp
wdata<-"/home/brandon/vestawd/omz/2018_data/anem/OC1806A/130002/data" # Cruise wind/anemometer
gps_data<-"/home/brandon/vestawd/omz/2018_data/gnss/data" # Cruise gps raw
corrected_fdata<-"/home/brandon/vestawd/omz/2018_data/fluor/corrected_fluorometer/FLOW_THROUGH-20210511T213127Z-001/FLOW_THROUGH/CHL"
#### fluorometer functions ####
f.read_cruise<-function(directory){
files<-list.files(directory)
data<-vector(mode="list", length=length(files))
for(i in 1:length(files)){
data[[i]]<-read.delim(file.path(directory, files[i]), sep =",", header = F)
}
return(data)}
f.rearrange_temp<-function(x, c.names){
names(x)<-c.names
options("digits.secs"=3)
x$time<-mdy_hms(paste(x$`SCS UTC DATE`, x$`SCS UTC TIME`, tz="UTC"))
x$time<-with_tz(x$time, tz="US/Mountain")
x$date<-date(x$time)
x<-subset(x, select= c(date, time, `TEMPERATURE CELSIUS`))
x<-as_tibble(x)
names(x)<-c("date", "time", "celsius")
return(x)
}
f.rearrange_flr<-function(x, c.names){
names(x)<-c.names
options("digits.secs"=3)
x$time<-mdy_hms(paste(x$`SCS UTC DATE`, x$`SCS UTC TIME`, tz="UTC"))
x$time<-with_tz(x$time, tz="US/Mountain")
x$date<-date(x$time)
x<-subset(x, select= c(date, time,  `TRANSMISSOMETER RAW VOLTAGE`, `FLOUROMETER RAW VOLTAGE`, `SURFACE PAR RAW VOLTAGE`))
x<-as_tibble(x)
names(x)<-c("date", "time", "transmissometer", "fluorometer","PAR")
return(x)
}
f.rearrange_flr_corrected<-function(x){
options("digits.secs"=3)
x$time<-mdy_hms(paste(x[,1], x[,2], tz="UTC"))
x$time<-with_tz(x$time, tz="US/Mountain")
x$date<-date(x$time)
x<-subset(x, select= c(date, time,  V4))
x<-as_tibble(x)
names(x)<-c("date", "time", "chlorophyll")
return(x)
}
f.rearrange_wind<-function(x){
#names(x)<-c.names
options("digits.secs"=3)
x$time<-mdy_hms(paste(x$V1, x$V2, tz="UTC"))
x$time<-with_tz(x$time, tz="US/Mountain")
x$date<-date(x$time)
#x<-subset(x, select=c(date, time, V3, V4, V5, V6, V7,V8,V9,V10))
x<-subset(x, select=c(date, time, V5))
x<-as_tibble(x)
return(x)
}
#### gps functions ####
f.rearrange_gps<-function(x, c.names){
x<-x[,c(1,2,5,7)]
names(x)<-c.names
options("digits.secs"=3)
x$time<-mdy_hms(paste(x$date1, x$time1, tz="UTC"))
x$time<-with_tz(x$time, tz="US/Mountain")
x$date<-date(x$time)
x<-subset(x, select= c(date, time, lat, lon))
x<-as_tibble(x)
names(x)<-c("date", "time", "lat", "lon")
return(x)
} # requires env variable "c.names"
f.gps_lat<-function(data){
x<-data$lat
x<-format(round(x, digits=5), nsmall = 5)
x<-as.character(x)
p<-"(([0-9]{2})(?=\\.))"
r<-" \\1"
x<-str_replace_all(pattern=p, replacement = r, x)
x<-measurements::conv_unit(x, from='deg_dec_min', to ="dec_deg")
x<-as.numeric(x)
x<-format(round(x, digits=4), nsmall = 4)
data$lat<<-x
}
f.gps_lon<-function(data){
x<-data$lon
x<-format(round(x, digits=5), nsmall = 5)
x<-as.character(x)
p<-"(([0-9]{2})(?=\\.))"
r<-" \\1"
x<-str_replace_all(pattern=p, replacement = r, x)
x<-measurements::conv_unit(x, from='deg_dec_min', to ="dec_deg")
x<-as.numeric(x)
x<-format(round(x, digits=4), nsmall = 4)
data$lon<<-x
}
#### combination functions ####
f.time_join_flow<-function(f, t){
#for joining data by "nearest" time/date in seconds
#requires "data.table" package
setDT(f)
setDT(t)
setkey(f, time)
setkey(t, time)
f<-f[t, roll='nearest']
} #for spatial stations from flowthrough
f.time_join2_flow<-function(data, pos){
setDT(data)
setDT(pos)
setkey(data, time)
setkey(pos, time)
data<-data[pos, roll='nearest']
}
#### ctd functions ####
f.time_ctd<-function(x){
x$time<-with_tz(x$time, tz="US/Mountain")
return(x)} #for spatial stations from CTD centroids
f.cent_ctd<-function(x){
y<-SpatialPoints(coords=cbind(x$longitude, x$latitude), proj4string = CRS("+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0"))
x<-gCentroid(y)
x<-cbind(x@coords[1], x@coords[2])
return(x)} #for spatial stations from CTD centroids
f.mean_time_ctd<-function(x){
x<-with_tz(x$time, tzone="UTC")%>%as.numeric%>%mean
x<-with_tz(with_tz(as_datetime(x), tzone="UTC"), tzone="US/Mountain")
return(x)}  #for spatial stations from CTD centroids
# f.read_ctd<-function(ctdata){
#   files<-list.files(ctdata)
#   data<-vector(mode="list", length=length(files))
#
#   for(i in 1:length(files)){
#     # add if else statement
#     data[[i]]<-read.ctd(file.path(ctdata, files[]),)
#    # trim downcast
#     x<-ctdTrim(x, method = "downcast")
#     }
#
#
# return(data)} #for CTD data not used
# remote sensing functions
setwd(robj)
pos<-readRDS("OC1806A_gps.R")
#f<-readRDS("OC1806A_fluorometer_raw.R") # old uncorrected data
f<-readRDS("OC1806A_fluorometer_corrected.R")
t<-readRDS("OC1806A_temperature_raw.R")
w<-readRDS("OC1806A_wind_raw.R")
names(w)<-c("date", "time", "wind")
data<-f.time_join_flow(f,w)
data<-subset(data, select=c(date, time, chlorophyll, wind))
data<-f.time_join_flow(f=t, t=data)
rm(f,t,w)
data<-f.time_join_flow(f,w)
names(data)
25.day <- interval(start ="2018-06-25", end = "2018-06-25") # subset x-axis
setwd(robj)
pos<-readRDS("OC1806A_gps.R")
#f<-readRDS("OC1806A_fluorometer_raw.R") # old uncorrected data
f<-readRDS("OC1806A_fluorometer_corrected.R")
t<-readRDS("OC1806A_temperature_raw.R")
w<-readRDS("OC1806A_wind_raw.R")
names(w)<-c("date", "time", "wind")
data<-f.time_join_flow(f,w)
data<-subset(data, select=c(date, time, chlorophyll, wind))
data<-f.time_join_flow(f=t, t=data)
rm(f,t,w)
data<-subset(data, select=c(date, time, wind, chlorophyll, celsius))
## match position to data
x<-f.time_join2_flow(data,pos)
rm(pos,data)
head(x)
date_25 <- interval(start ="2018-06-25-06:00", end = "2018-06-25-18:00") # subset x-axis
#f<-readRDS("OC1806A_fluorometer_raw.R") # old uncorrected data
f<-readRDS("OC1806A_fluorometer_corrected.R")
head(f)
date_25 <- interval(start ="2018-06-25 06:00:00", end = "2018-06-25 18:00:00") # subset x-axis
day_25<- x[which(time %within% date_25),]
head(day_25)
date_25[1,]
day_25[1,]
date_25 <- interval(start ="2018-06-25 06:00", end = "2018-06-25 18:00") # subset x-axis
date_25 <- interval(start ="2018-06-25 06:00:00", end = "2018-06-25 18:00:00") # subset x-axis
day_25<- x[which(time %within% date_25),]
head(day_25)
min(day_25$time)
date_25 <- interval(start ="2018-06-25 05:00:00", end = "2018-06-25 18:00:00") # subset x-axis
day_25<- x[which(time %within% date_25),]
head(day_25)
tz(x)
tz(x$time)
date_25 <- interval(start ="2018-06-25 05:00:00 MDT", end = "2018-06-25 18:00:00 MDT") # subset x-axis
day_25<- x[which(time %within% date_25),]
head(day_25)
date_25 <- interval(start ="2018-06-25 12:00:00", end = "2018-06-25 24:00:00 MDT") # subset x-axis
day_25<- x[which(time %within% date_25),]
head(day_25)
max(day_25$time)
x<-read.csv("https://www.pfeg.noaa.gov/products/PFELData/upwell/daily/p09dayac.all", header=T, skip = 5, sep="")
head(x)
dim(x)
x[19843]
x[19843,]
plot(x)
y<-read.csv("http://www.mjacox.com/wp-content/uploads/2020/02/CUTI_daily.csv") # look like I will need to edit per month
y<-y[,c(1:3,12)]# hardcoded, improve
# set plot lengh here
days<-30
start<-x[(length(x$YYYYMMDD)-days),1]
end<-(x[length(x$YYYYMMDD), 1])
names(y)
times<-ts(x, start=start, frequency = 1, end=end)
times<-ts(x, start=start, end=end)
labs<-as.character(x[(which(x==start):which(x==end)),1])
plot(times[,2], col= "red",
ylab="Index: (+) = upwelling, (-) = downwelling", lwd=4,
main="Bakun Upwelling Index: 39 N, 125 W",  xaxt = "n"
)
axis(side = 1, tck=1, las=2, labels=labs, at=labs)
