geom_line(data=w, aes(date, avg), color="black", lwd=0.4)+
scale_y_continuous(name =txt$ylab, sec.axis = sec_axis(~./scale.g, name=txt$ylab2,  breaks = g.breaks , labels= labs))+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top", limits = date(c("2002-01-01","2022-06-01")))+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-06-01')), date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-01-01')), date_breaks = "1 years", date_labels = "%Y", position = "top")+
scale_x_date(limits = as.Date(c('2002-03-01', '2022-01-15')), date_breaks = "1 years", date_labels = "%Y", position = "top", expand = c(0, 0))+
theme(axis.title.x=element_blank(), plot.tag = element_text(face = "bold"))
# expand = c(0, 0))
#
# limits = as.Date(c('1/1/2002', '6/1/2022'))
plot_g
txt<-fig4_txt
w<-inner_join(x,y, by='date') %>% inner_join(., z, by='date' ) %>% select(., - ef)
h_rect<-rects$h
t_rect<-rects$t
t_4_rect<-rects$t_4
stdp<-1013.25
ff<-1.745
adj<-stdp+ff*(stdp-min(h_rect$y2))
h_rect$y2<-abs(h_rect$y2-adj)
t_rect$y2<-abs(t_rect$y2-adj)
t_4_rect$y2<-abs(t_4_rect$y2-adj)
g.breaks<-c( 872, 900, 920, plyr::round_any((944+920)/2, 5, f=floor), plyr::round_any((964+945)/2, 5, f=ceiling), plyr::round_any((979+965)/2,5, f=floor), 980, 1000) %>% round(., 0) %>% append(., c(round(stdp,2),  round(adj,2)))
labs<-(g.breaks)
g.breaks<-abs(g.breaks-adj)
t_4_rect<-filter(t_4_rect, start >=date(min(w$date)))
t_rect<-filter(t_rect, start >=date(min(w$date)))
h_rect<-filter(h_rect, start >=date(min(w$date)))
scale.g<-(max(w$avg)/max(c(t_rect$y2, h_rect$y2, t_4_rect$y2)))
plot_g<-ggplot()+ theme_bw()+
geom_segment(data=t_4_rect, mapping=aes(x=start, xend=end, yend=y2*scale.g, y=-Inf), linetype ="dashed", color=rect_fill_outside, alpha=.5)+
geom_hline(yintercept=(mean(w$avg)), data=w, linetype="dashed", color ="black")+
geom_rect(data=t_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill_non, fill=rect_fill_non, alpha=.5)+
geom_rect(data=h_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill, fill=rect_fill, alpha=.5)+
# geom_point(data=w, aes(date, avg), color="black", lwd=.6)+
geom_line(data=w, aes(date, avg), color="black", lwd=0.4)+
scale_y_continuous(name =txt$ylab, sec.axis = sec_axis(~./scale.g, name=txt$ylab2,  breaks = g.breaks , labels= labs))+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top", limits = date(c("2002-01-01","2022-06-01")))+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-06-01')), date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-01-01')), date_breaks = "1 years", date_labels = "%Y", position = "top")+
scale_x_date(limits = as.Date(c('2002-05-01', '2022-01-15')), date_breaks = "1 years", date_labels = "%Y", position = "top", expand = c(0, 0))+
theme(axis.title.x=element_blank(), plot.tag = element_text(face = "bold"))
# expand = c(0, 0))
#
# limits = as.Date(c('1/1/2002', '6/1/2022'))
plot_g
txt<-fig4_txt
w<-inner_join(x,y, by='date') %>% inner_join(., z, by='date' ) %>% select(., - ef)
h_rect<-rects$h
t_rect<-rects$t
t_4_rect<-rects$t_4
stdp<-1013.25
ff<-1.745
adj<-stdp+ff*(stdp-min(h_rect$y2))
h_rect$y2<-abs(h_rect$y2-adj)
t_rect$y2<-abs(t_rect$y2-adj)
t_4_rect$y2<-abs(t_4_rect$y2-adj)
g.breaks<-c( 872, 900, 920, plyr::round_any((944+920)/2, 5, f=floor), plyr::round_any((964+945)/2, 5, f=ceiling), plyr::round_any((979+965)/2,5, f=floor), 980, 1000) %>% round(., 0) %>% append(., c(round(stdp,2),  round(adj,2)))
labs<-(g.breaks)
g.breaks<-abs(g.breaks-adj)
t_4_rect<-filter(t_4_rect, start >=date(min(w$date)))
t_rect<-filter(t_rect, start >=date(min(w$date)))
h_rect<-filter(h_rect, start >=date(min(w$date)))
scale.g<-(max(w$avg)/max(c(t_rect$y2, h_rect$y2, t_4_rect$y2)))
plot_g<-ggplot()+ theme_bw()+
geom_segment(data=t_4_rect, mapping=aes(x=start, xend=end, yend=y2*scale.g, y=-Inf), linetype ="dashed", color=rect_fill_outside, alpha=.5)+
geom_hline(yintercept=(mean(w$avg)), data=w, linetype="dashed", color ="black")+
geom_rect(data=t_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill_non, fill=rect_fill_non, alpha=.5)+
geom_rect(data=h_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill, fill=rect_fill, alpha=.5)+
# geom_point(data=w, aes(date, avg), color="black", lwd=.6)+
geom_line(data=w, aes(date, avg), color="black", lwd=0.4)+
scale_y_continuous(name =txt$ylab, sec.axis = sec_axis(~./scale.g, name=txt$ylab2,  breaks = g.breaks , labels= labs))+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top", limits = date(c("2002-01-01","2022-06-01")))+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-06-01')), date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-01-01')), date_breaks = "1 years", date_labels = "%Y", position = "top")+
scale_x_date(limits = as.Date(c('2002-05-01', '2022-02-01')), date_breaks = "1 years", date_labels = "%Y", position = "top", expand = c(0, 0))+
theme(axis.title.x=element_blank(), plot.tag = element_text(face = "bold"))
# expand = c(0, 0))
#
# limits = as.Date(c('1/1/2002', '6/1/2022'))
plot_g
txt<-fig4_txt
w<-inner_join(x,y, by='date') %>% inner_join(., z, by='date' ) %>% select(., - ef)
h_rect<-rects$h
t_rect<-rects$t
t_4_rect<-rects$t_4
stdp<-1013.25
ff<-1.745
adj<-stdp+ff*(stdp-min(h_rect$y2))
h_rect$y2<-abs(h_rect$y2-adj)
t_rect$y2<-abs(t_rect$y2-adj)
t_4_rect$y2<-abs(t_4_rect$y2-adj)
g.breaks<-c( 872, 900, 920, plyr::round_any((944+920)/2, 5, f=floor), plyr::round_any((964+945)/2, 5, f=ceiling), plyr::round_any((979+965)/2,5, f=floor), 980, 1000) %>% round(., 0) %>% append(., c(round(stdp,2),  round(adj,2)))
labs<-(g.breaks)
g.breaks<-abs(g.breaks-adj)
t_4_rect<-filter(t_4_rect, start >=date(min(w$date)))
t_rect<-filter(t_rect, start >=date(min(w$date)))
h_rect<-filter(h_rect, start >=date(min(w$date)))
scale.g<-(max(w$avg)/max(c(t_rect$y2, h_rect$y2, t_4_rect$y2)))
plot_g<-ggplot()+ theme_bw()+
geom_segment(data=t_4_rect, mapping=aes(x=start, xend=end, yend=y2*scale.g, y=-Inf), linetype ="dashed", color=rect_fill_outside, alpha=.5)+
geom_hline(yintercept=(mean(w$avg)), data=w, linetype="dashed", color ="black")+
geom_rect(data=t_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill_non, fill=rect_fill_non, alpha=.5)+
geom_rect(data=h_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill, fill=rect_fill, alpha=.5)+
geom_point(data=w, aes(date, avg), color="black", lwd=.6)+
# geom_line(data=w, aes(date, avg), color="black", lwd=0.4)+
scale_y_continuous(name =txt$ylab, sec.axis = sec_axis(~./scale.g, name=txt$ylab2,  breaks = g.breaks , labels= labs))+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top", limits = date(c("2002-01-01","2022-06-01")))+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-06-01')), date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-01-01')), date_breaks = "1 years", date_labels = "%Y", position = "top")+
scale_x_date(limits = as.Date(c('2002-05-01', '2022-02-01')), date_breaks = "1 years", date_labels = "%Y", position = "top", expand = c(0, 0))+
theme(axis.title.x=element_blank(), plot.tag = element_text(face = "bold"))
# expand = c(0, 0))
#
# limits = as.Date(c('1/1/2002', '6/1/2022'))
plot_g
txt<-fig4_txt
w<-inner_join(x,y, by='date') %>% inner_join(., z, by='date' ) %>% select(., - ef)
h_rect<-rects$h
t_rect<-rects$t
t_4_rect<-rects$t_4
stdp<-1013.25
ff<-1.745
adj<-stdp+ff*(stdp-min(h_rect$y2))
h_rect$y2<-abs(h_rect$y2-adj)
t_rect$y2<-abs(t_rect$y2-adj)
t_4_rect$y2<-abs(t_4_rect$y2-adj)
g.breaks<-c( 872, 900, 920, plyr::round_any((944+920)/2, 5, f=floor), plyr::round_any((964+945)/2, 5, f=ceiling), plyr::round_any((979+965)/2,5, f=floor), 980, 1000) %>% round(., 0) %>% append(., c(round(stdp,2),  round(adj,2)))
labs<-(g.breaks)
g.breaks<-abs(g.breaks-adj)
t_4_rect<-filter(t_4_rect, start >=date(min(w$date)))
t_rect<-filter(t_rect, start >=date(min(w$date)))
h_rect<-filter(h_rect, start >=date(min(w$date)))
scale.g<-(max(w$avg)/max(c(t_rect$y2, h_rect$y2, t_4_rect$y2)))
plot_g<-ggplot()+ theme_bw()+
geom_segment(data=t_4_rect, mapping=aes(x=start, xend=end, yend=y2*scale.g, y=-Inf), linetype ="dashed", color=rect_fill_outside, alpha=.5)+
geom_hline(yintercept=(mean(w$avg)), data=w, linetype="dashed", color ="black")+
geom_rect(data=t_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill_non, fill=rect_fill_non, alpha=.5)+
geom_rect(data=h_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill, fill=rect_fill, alpha=.5)+
geom_point(data=w, aes(date, avg), color="black", lwd=.6)+
geom_line(data=w, aes(date, avg), color="black", lwd=0.4)+
scale_y_continuous(name =txt$ylab, sec.axis = sec_axis(~./scale.g, name=txt$ylab2,  breaks = g.breaks , labels= labs))+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top", limits = date(c("2002-01-01","2022-06-01")))+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-06-01')), date_breaks = "1 years", date_labels = "%Y", date_minor_breaks = "6 months", position = "top")+
# scale_x_date(limits = as.Date(c('2002-01-01', '2022-01-01')), date_breaks = "1 years", date_labels = "%Y", position = "top")+
scale_x_date(limits = as.Date(c('2002-05-01', '2022-02-01')), date_breaks = "1 years", date_labels = "%Y", position = "top", expand = c(0, 0))+
theme(axis.title.x=element_blank(), plot.tag = element_text(face = "bold"))
# expand = c(0, 0))
#
# limits = as.Date(c('1/1/2002', '6/1/2022'))
plot_g
dev.off()
number_h_ratio<-33/7
setwd(wd)
setwd(fig)
pdf("figure_4_v1.pdf", height=number_h_ratio , width =14)
plot_g
dev.off()
txt<-fig4_txt
w<-inner_join(x,y, by='date') %>% inner_join(., z, by='date' ) %>% select(., - ef)
h_rect<-rects$h
t_rect<-rects$t
t_4_rect<-rects$t_4
stdp<-1013.25
ff<-1.745
adj<-stdp+ff*(stdp-min(h_rect$y2))
h_rect$y2<-abs(h_rect$y2-adj)
t_rect$y2<-abs(t_rect$y2-adj)
t_4_rect$y2<-abs(t_4_rect$y2-adj)
g.breaks<-c( 872, 900, 920, plyr::round_any((944+920)/2, 5, f=floor), plyr::round_any((964+945)/2, 5, f=ceiling), plyr::round_any((979+965)/2,5, f=floor), 980, 1000) %>% round(., 0) %>% append(., c(round(stdp,2),  round(adj,2)))
labs<-(g.breaks)
g.breaks<-abs(g.breaks-adj)
t_4_rect<-filter(t_4_rect, start >=date(min(w$date)))
t_rect<-filter(t_rect, start >=date(min(w$date)))
h_rect<-filter(h_rect, start >=date(min(w$date)))
scale.g<-(max(w$avg)/max(c(t_rect$y2, h_rect$y2, t_4_rect$y2)))
plot_v2<-ggplot()+ theme_bw()+
# geom_segment(data=t_4_rect, mapping=aes(x=start, xend=end, yend=y2*scale.g, y=-Inf), linetype ="dashed", color=rect_fill_outside, alpha=.5)+
geom_hline(yintercept=(mean(w$avg)), data=w, linetype="dashed", color ="black")+
geom_rect(data=t_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill_non, fill=rect_fill_non, alpha=.5)+
geom_rect(data=h_rect, mapping=aes(xmin=start, xmax=end, ymin=-Inf, ymax=y2*scale.g), color=rect_fill, fill=rect_fill, alpha=.5)+
geom_point(data=w, aes(date, avg), color="black", lwd=.6)+
geom_line(data=w, aes(date, avg), color="black", lwd=0.4)+
scale_y_continuous(name =txt$ylab, sec.axis = sec_axis(~./scale.g, name=txt$ylab2,  breaks = g.breaks , labels= labs))+
scale_x_date(limits = as.Date(c('2002-05-01', '2022-02-01')), date_breaks = "1 years", date_labels = "%Y", position = "top", expand = c(0, 0))+
theme(axis.title.x=element_blank(), plot.tag = element_text(face = "bold"))
# expand = c(0, 0))
#
# limits = as.Date(c('1/1/2002', '6/1/2022'))
plot_v2
dev.off()
number_h_ratio<-33/7
setwd(wd)
setwd(fig)
pdf("figure_four_v2.pdf", height=number_h_ratio , width =14)
plot_v2
dev.off()
rm(list=ls())
# relative directories
robj<-"r_objects"
# fig<-"../../figures"
# gis_data<-"../../data/gis_data"
# data_d<-"../../data/2018_data"
data_d<-"../../data"
# ocean_color<-"../../data/ocean_color_bud"
# bathy_d<-"../../data/bathy" # edit this
output<-"../../output"
knitr::opts_chunk$set(echo =FALSE)
knitr::opts_knit$set(root.dir = rprojroot::find_rstudio_root_file())
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
# packages<-c("stars", "gridExtra", "cowplot", "sf", "ggspatial","stringr","sp", "rgdal",  "rgeos", "raster","readr" ,"tidyverse", "ggplot2", "lubridate",  "ggthemes", "data.table", "reshape2", "RColorBrewer", "marmap", "extrafont", "oce", "MODIS", "measurements")  # set packages here
# tidyverse: is all of the following packages: ggplot2, dplyr, tidyr, readr, purr, tibble, sringr, & forcats.
packages<-c("sp", "rgdal",  "rgeos", "raster", "readr", "tidyverse", "lubridate",  "ggthemes",  "sf", "cmocean", "ncdf4", "RNetCDF",  "plot3D", "tidync", "devtools", "stars", "ncmeta", "maps", "oce", "data.table", "fasterize", "RStoolbox", "scales", "purrr", "nngeo")
# "HURDAT",
f.ipak(packages)
# lapply(packages, require, character.only = TRUE)
# rm(f.ipak, packages)
print(paste0("Current Working Directory is ", getwd()))
wd<-getwd()
setwd(robj)
# bud_match<-readRDS("bud_match.R")
# match<-readRDS("match.R")
load("20220201_temp_workspace.RData")
# rm(function_variables, m.coast)
# save(function_variables, m.coast, database,  file="20220207_temp_workspace.RData")
# saveRDS(match, "match.R")
# saveRDS(bud_match, "bud_match.R")
file<-(file.path(data_d, "odz_atlas/nc_depth_DIVA.nc"))
# q<-c("maxFODZ", "topDepth", "thickness", "botDepth")
q<-c("topDepth")
diva_depth.odz<-tidync(file)%>% activate(c("D0,D1")) %>% hyper_tibble(select_var =q)
quit
quit()
rm(list=ls())
robj<-"r_objects"
setwd(wd)
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
packages<-c("sp", "rgdal",  "rgeos", "raster", "readr", "tidyverse", "lubridate",  "ggthemes",  "sf", "cmocean", "ncdf4", "RNetCDF",  "plot3D", "tidync", "devtools", "stars", "ncmeta", "maps", "oce",
"data.table","raster", "fasterize", "RStoolbox", "scales", "purrr", "marmap", "gsw", "R.utils","Matrix")
f.ipak(packages)
setwd(wd)
getwd()
wd<-"/home/brandon/vestawd/omz/wd/r_wd/r_scripts"
setwd(wd)
getwd()
rm(list=ls())
# wd<-"/home/brandon/vestawd/omz/wd/r_wd/r_scripts"
wd<-"/home/brandon/vestawd/omz/wd/r_wd/"
robj<-"r_objects"
setwd(wd)
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
packages<-c("sp", "rgdal",  "rgeos", "raster", "readr", "tidyverse", "lubridate",  "ggthemes",  "sf", "cmocean", "ncdf4", "RNetCDF",  "plot3D", "tidync", "devtools", "stars", "ncmeta", "maps", "oce",
"data.table","raster", "fasterize", "RStoolbox", "scales", "purrr", "marmap", "gsw", "R.utils","Matrix")
f.ipak(packages)
setwd(wd)
path_code = "r_scripts/submodules/BGC-ARGO_R_WORKSHOP/"
source(paste0(path_code, "initialize_argo.R"))
source(paste0(path_code, "try_download.R"))
source(paste0(path_code, "do_download.R"))
source(paste0(path_code, "download_float.R"))
source(paste0(path_code, "download_multi_floats.R"))
source(paste0(path_code, "check_dir.R"))
source(paste0(path_code, "get_var_name_units.R"))
source(paste0(path_code, "select_profiles.R"))
source(paste0(path_code, "load_float_data.R"))
source(paste0(path_code, "plot_trajectories.R"))
source(paste0(path_code, "get_lon_lat_lims.R"))
source(paste0(path_code, "show_trajectories.R"))
source(paste0(path_code, "do_pause.R"))
source(paste0(path_code, "depth_interp.R"))
source(paste0(path_code, "calc_auxil.R"))
source(paste0(path_code, "get_multi_profile_mean.R"))
source(paste0(path_code, "show_profiles.R"))
source(paste0(path_code, "plot_profiles.R"))
source(paste0(path_code, "show_sections.R"))
source(paste0(path_code, "plot_sections.R"))
source(paste0(path_code, "plot_profiles.R"))
rm(f.ipak, packages, path_code)
setwd(robj)
stations_mapped<-readRDS("OC1806A_mapped_ctd_stations.R")
e<-extent(stations_mapped)
load("init_argo.RData")
h<-readRDS("hurdat.R")
h$DateTime<-with_tz(h$DateTime, tz="UTC")
storm_name<-"OLAF"
print(filter(h, Name == storm_name) %>% select(., Key) %>% unique(.))
temp<-filter(h, Name == storm_name & year(DateTime) >= 2021) # Knew year form Mike's email
h.pts<- sf::st_as_sf(temp, coords = c("Lon","Lat"), crs = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
conv<-1.94384 # convert to m/s
h.pts$max_sustained_wind_m_s<-h.pts$Wind/conv
rm(h, temp )
st_date<-min(h.pts$DateTime)
ed_date<-max(h.pts$DateTime)
storm_profiles<-select_profiles(lon_lim=c(e[1],e[2]), lat_lim=c(e[3], e[4]), start_date=date(st_date), end_date=date(ed_date), outside="none", sensor=NULL)
f.profile.select<-function(storm_profiles, days_around){
profile.windows<-vector(mode="list", length=length(storm_profiles$floats))
for(i in 1:length(profile.windows)){
float<-storm_profiles$floats[i]
float_idx <-which(Float$wmoid==float)
prof_ids = c(Float$prof_idx1[float_idx]:Float$prof_idx2[float_idx])
dates = Sprof$date[prof_ids]
overpass<-dates[which.min(abs(dates-st_date)):which.min(abs(dates-ed_date))]
window<-c((which.min(abs(dates-st_date))-days_around):(which.min(abs(dates-ed_date))+days_around))
profiles<-prof_ids[window]
TIME<-dates[window]
t<-data.frame(TIME, profiles)
profile.windows[[i]]$data<-t
profile.windows[[i]]$overpass<-overpass
profile.windows[[i]]$window<-window
profile.windows[[i]]$bufer_number<-days_around
names(profile.windows)[i]<-storm_profiles$floats[i]
}
return(profile.windows)
rm(t)
}
f.spacetime_agro<-function(storm_profiles){
floats.sp<-vector(mode="list", length=length(storm_profiles$floats))
for(i in 1:length(floats.sp)){
d<-load_float_data(storm_profiles$floats[i])
d<-d$Data[[1]] %>% lapply(., as.vector) %>% as.data.frame() %>% distinct() %>% na.omit()
d<-d %>% filter(., DIRECTION=="A") %>% st_as_sf(., coords = c("LONGITUDE", "LATITUDE" ), crs = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
# d<-d %>% st_as_sf(., coords = c("LONGITUDE", "LATITUDE" ), crs = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
floats.sp[[i]]<-d
names(floats.sp)[i]<-storm_profiles$floats[i]
}
return(floats.sp)
rm(d)
}
f.subset<-f.subset<-function(profile.windows, floats.sp){
window.sp<-vector(mode="list", length=length(floats.sp))
for(i in 1:length(floats.sp)){
x<-profile.windows[[i]]$data$TIME %>% as_datetime(.)
y<-floats.sp[[i]]
y$TIME<-y$TIME %>% as_datetime(.)
window<-c(which.min(abs(y$TIME-x[1]))):(which.min(abs(y$TIME-x[length(x)])))
window.sp[[i]]<-y[window,]
names(window.sp)[i]<-storm_profiles$floats[i]
}
return(window.sp)
}
profile.windows<-f.profile.select((storm_profiles), days_around =5)
floats.sp<-f.spacetime_agro(storm_profiles)
window.sp<-f.subset(profile.windows, floats.sp)
rm(list=ls())
# wd<-"/home/brandon/vestawd/omz/wd/r_wd/r_scripts"
wd<-"/home/brandon/vestawd/omz/wd/r_wd/"
robj<-"r_objects"
setwd(wd)
f.ipak <- function(pkg){
# loads packages, quietly, given by a vector of package names e.g., pkg<-c("ggplot", "tidyverse")
# will install  packages listed , and their dependencies, if needed.
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE, quiet=T, verbose = F)
sapply(pkg, require, character.only = TRUE, quietly = FALSE, warn.conflicts=F)
}
packages<-c("sp", "rgdal",  "rgeos", "raster", "readr", "tidyverse", "lubridate",  "ggthemes",  "sf", "cmocean", "ncdf4", "RNetCDF",  "plot3D", "tidync", "devtools", "stars", "ncmeta", "maps", "oce",
"data.table","raster", "fasterize", "RStoolbox", "scales", "purrr", "marmap", "gsw", "R.utils","Matrix")
f.ipak(packages)
setwd(wd)
path_code = "r_scripts/submodules/BGC-ARGO_R_WORKSHOP/"
source(paste0(path_code, "initialize_argo.R"))
source(paste0(path_code, "try_download.R"))
source(paste0(path_code, "do_download.R"))
source(paste0(path_code, "download_float.R"))
source(paste0(path_code, "download_multi_floats.R"))
source(paste0(path_code, "check_dir.R"))
source(paste0(path_code, "get_var_name_units.R"))
source(paste0(path_code, "select_profiles.R"))
source(paste0(path_code, "load_float_data.R"))
source(paste0(path_code, "plot_trajectories.R"))
source(paste0(path_code, "get_lon_lat_lims.R"))
source(paste0(path_code, "show_trajectories.R"))
source(paste0(path_code, "do_pause.R"))
source(paste0(path_code, "depth_interp.R"))
source(paste0(path_code, "calc_auxil.R"))
source(paste0(path_code, "get_multi_profile_mean.R"))
source(paste0(path_code, "show_profiles.R"))
source(paste0(path_code, "plot_profiles.R"))
source(paste0(path_code, "show_sections.R"))
source(paste0(path_code, "plot_sections.R"))
source(paste0(path_code, "plot_profiles.R"))
rm(f.ipak, packages, path_code)
setwd(robj)
stations_mapped<-readRDS("OC1806A_mapped_ctd_stations.R")
e<-extent(stations_mapped)
#does alrger extent matter
e[1]=-125.00
e[2]=-100.00
e[3]=10.00
e[4]=30.00
load("init_argo.RData")
h<-readRDS("hurdat.R")
h$DateTime<-with_tz(h$DateTime, tz="UTC")
storm_name<-"OLAF"
print(filter(h, Name == storm_name) %>% select(., Key) %>% unique(.))
temp<-filter(h, Name == storm_name & year(DateTime) >= 2021) # Knew year form Mike's email
h.pts<- sf::st_as_sf(temp, coords = c("Lon","Lat"), crs = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
conv<-1.94384 # convert to m/s
h.pts$max_sustained_wind_m_s<-h.pts$Wind/conv
rm(h, temp )
st_date<-min(h.pts$DateTime)
ed_date<-max(h.pts$DateTime)
storm_profiles<-select_profiles(lon_lim=c(e[1],e[2]), lat_lim=c(e[3], e[4]), start_date=date(st_date), end_date=date(ed_date), outside="none", sensor=NULL)
# download_multi_floats(storm_profiles$floats)
# data<-load_float_data(storm_profiles$floats)
# data<-data$Data
## profiles
### functions
f.profile.select<-function(storm_profiles, days_around){
profile.windows<-vector(mode="list", length=length(storm_profiles$floats))
for(i in 1:length(profile.windows)){
float<-storm_profiles$floats[i]
float_idx <-which(Float$wmoid==float)
prof_ids = c(Float$prof_idx1[float_idx]:Float$prof_idx2[float_idx])
dates = Sprof$date[prof_ids]
overpass<-dates[which.min(abs(dates-st_date)):which.min(abs(dates-ed_date))]
window<-c((which.min(abs(dates-st_date))-days_around):(which.min(abs(dates-ed_date))+days_around))
profiles<-prof_ids[window]
TIME<-dates[window]
t<-data.frame(TIME, profiles)
profile.windows[[i]]$data<-t
profile.windows[[i]]$overpass<-overpass
profile.windows[[i]]$window<-window
profile.windows[[i]]$bufer_number<-days_around
names(profile.windows)[i]<-storm_profiles$floats[i]
}
return(profile.windows)
rm(t)
}
f.spacetime_agro<-function(storm_profiles){
floats.sp<-vector(mode="list", length=length(storm_profiles$floats))
for(i in 1:length(floats.sp)){
d<-load_float_data(storm_profiles$floats[i])
d<-d$Data[[1]] %>% lapply(., as.vector) %>% as.data.frame() %>% distinct() %>% na.omit()
d<-d %>% filter(., DIRECTION=="A") %>% st_as_sf(., coords = c("LONGITUDE", "LATITUDE" ), crs = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
# d<-d %>% st_as_sf(., coords = c("LONGITUDE", "LATITUDE" ), crs = "+proj=longlat +datum=WGS84 +ellps=WGS84 +towgs84=0,0,0")
floats.sp[[i]]<-d
names(floats.sp)[i]<-storm_profiles$floats[i]
}
return(floats.sp)
rm(d)
}
f.subset<-f.subset<-function(profile.windows, floats.sp){
window.sp<-vector(mode="list", length=length(floats.sp))
for(i in 1:length(floats.sp)){
x<-profile.windows[[i]]$data$TIME %>% as_datetime(.)
y<-floats.sp[[i]]
y$TIME<-y$TIME %>% as_datetime(.)
window<-c(which.min(abs(y$TIME-x[1]))):(which.min(abs(y$TIME-x[length(x)])))
window.sp[[i]]<-y[window,]
names(window.sp)[i]<-storm_profiles$floats[i]
}
return(window.sp)
}
profile.windows<-f.profile.select((storm_profiles), days_around =5)
floats.sp<-f.spacetime_agro(storm_profiles)
x<-olaf_profiles$window.sp
robj
wd
## bah
## updates 2023-07-31
setwd(robj)
## bah
## updates 2023-07-31
wetwd(wd)
## bah
## updates 2023-07-31
setwd(wd)
setwd(robj)
readRDS("olaf_argo_profiles_temporal.R")
## bah
## updates 2023-07-31
setwd(wd)
setwd(robj)
olaf_profiles<-readRDS("olaf_profiles")
olaf_profiles<-readRDS(".R")
olaf_profiles<-readRDS("olaf_profiles.R")
olaf_profiles<-readRDS("olaf_profiles_list.R")
x<-olaf_profiles$window.sp
z<-x$`6903093` %>% filter(., CYCLE_NUMBER %in% c(48, 49, 50, 51, 52))
e<-extent(z)
q<-select_profiles(lon_lim=c(e[1],e[2]), lat_lim=c(e[3], e[4]), start_date=(z$TIME[1]-1), end_date=(z$TIME[length(z$TIME)]+1), outside="none", sensor=NULL)
d<-load_float_data(q$floats)
function (filename, write = FALSE, readunlim = TRUE, verbose = FALSE,
auto_GMT = TRUE, suppress_dimvals = FALSE, return_on_error = FALSE)
